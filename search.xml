<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker_deploy_mariadb_mysql</title>
      <link href="/2024/02/24/docker-deploy-mariadb-mysql/"/>
      <url>/2024/02/24/docker-deploy-mariadb-mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-配置MariaDB"><a href="#docker-配置MariaDB" class="headerlink" title="docker 配置MariaDB"></a>docker 配置MariaDB</h1><ol><li><p>拉取mariadb&#x2F;mysql docker 镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mariadb</span><br></pre></td></tr></table></figure></li><li><p>启动容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name mariadb -p 3306:3306 -e TZ=&quot;Asia/Shanghai&quot;  -e MYSQL_ROOT_PASSWORD=&#x27;your_password&#x27; -e MARIADB_PASSWORD=&#x27;your_password&#x27;  mariadb</span><br></pre></td></tr></table></figure></li><li><p>设置远程连接权限</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">a. 进入容器</span></span><br><span class="line">docker exec -it mariadb /bin/bash </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">b. 授权</span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;your_password&#x27;;</span><br></pre></td></tr></table></figure></li></ol><h1 id="c-刷新权限"><a href="#c-刷新权限" class="headerlink" title="c. 刷新权限"></a>c. 刷新权限</h1><p>flush privileges;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">4. 重启容器</span><br><span class="line">```shell </span><br><span class="line">docker restart mariadb</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> mariadb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端问题</title>
      <link href="/2024/02/20/%E5%89%8D%E7%AB%AF%E4%B8%8E%E5%90%8E%E7%AB%AF/"/>
      <url>/2024/02/20/%E5%89%8D%E7%AB%AF%E4%B8%8E%E5%90%8E%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="前端与后端-bug"><a href="#前端与后端-bug" class="headerlink" title="前端与后端 bug"></a>前端与后端 bug</h1><h2 id="前端-vue"><a href="#前端-vue" class="headerlink" title="前端 vue"></a>前端 vue</h2><h3 id="语法问题"><a href="#语法问题" class="headerlink" title="语法问题"></a>语法问题</h3><ul><li>在所有HTML中几乎都可以使用th: text属性，将接受的数据显示在标签内容中<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="comment">&lt;!--request作用域--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="comment">&lt;!--session作用域--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="comment">&lt;!--对象作用域--&gt;</span></span><br></pre></td></tr></table></figure></li><li>th: each用来遍历对象来展示; th:if 做判断</li><li>th: unless 相当于else</li><li>th: switch 条件判断</li><li>th: case&#x3D;”1”</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;b:$&#123;list&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;b.userId&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;b.userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;b.userPasswd&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>html表单属性名与对象类名不一致时，要是在参数前加上@RequestParam(“”)绑定</li></ul><h3 id="axios"><a href="#axios" class="headerlink" title="axios:"></a>axios:</h3><h4 id="get方法"><a href="#get方法" class="headerlink" title="get方法:"></a>get方法:</h4><ul><li>方式一</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(url,&#123;</span><br><span class="line">    <span class="attr">params</span>:&#123;  </span><br><span class="line">        <span class="attr">username</span>:<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">name</span>,</span><br><span class="line">        <span class="attr">password</span>:<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">pwd</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">100</span>)&#123;  </span><br><span class="line">        <span class="comment">//进行页面跳转</span></span><br><span class="line">        <span class="variable language_">this</span>.$messsage(&#123;</span><br><span class="line">            <span class="attr">showClose</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">message</span>: result.<span class="property">data</span>.<span class="property">msg</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;success&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&quot;/home&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//登录失败</span></span><br><span class="line">        <span class="variable language_">this</span>.$messsage(&#123;</span><br><span class="line">            <span class="attr">showClose</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">message</span>: result.<span class="property">data</span>.<span class="property">msg</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;error&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>方式二<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(url/login?name=<span class="string">&quot; + </span></span><br><span class="line"><span class="string">    this.form.name +</span></span><br><span class="line"><span class="string">    &quot;</span>&amp;pwd=<span class="string">&quot; +</span></span><br><span class="line"><span class="string">    this.form.pwd</span></span><br><span class="line"><span class="string">).then(res  =&gt;&#123;</span></span><br><span class="line"><span class="string">    //结果</span></span><br><span class="line"><span class="string">    console.log(result);</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="post"><a href="#post" class="headerlink" title="post"></a>post</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># axios的post请求</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 1.使用 qs.stringify()</span></span><br><span class="line"></span><br><span class="line"><span class="section">### qs.stringify() 作用:</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**将对象序列化成URL的形式**</span></span><br><span class="line"></span><br><span class="line">默认表单数据（json格式）：</span><br><span class="line"></span><br><span class="line">![<span class="string">image-20230114184055776</span>](<span class="link">/home/papillon/.config/Typora/typora-user-images/image-20230114184055776.png</span>)</span><br><span class="line"></span><br><span class="line">使用qs.stringify()之后的数据形式：</span><br><span class="line"></span><br><span class="line">![<span class="string">image-20230114184248892</span>](<span class="link">/home/papillon/.config/Typora/typora-user-images/image-20230114184248892.png</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">### axios.post 代码</span></span><br><span class="line"></span><br><span class="line"><span class="code">```js</span></span><br><span class="line"><span class="code">this.$axios.post(&#x27;http://localhost:8090/register1&#x27;,</span></span><br><span class="line"><span class="code">                 // this.data=JSON.stringify(this.user),</span></span><br><span class="line"><span class="code">                 this.data=this.$qs.stringify(this.user),</span></span><br><span class="line"><span class="code">                 // this.data=(this.user)</span></span><br><span class="line"><span class="code">    )</span></span><br><span class="line"><span class="code">    .then(res=&gt;&#123;</span></span><br><span class="line"><span class="code">    if(res.data.code==100)&#123;</span></span><br><span class="line"><span class="code">        this.$message(&#123;</span></span><br><span class="line"><span class="code">            showClose: true,</span></span><br><span class="line"><span class="code">            message: res.data.msg,</span></span><br><span class="line"><span class="code">            type: &quot;success&quot;</span></span><br><span class="line"><span class="code">        &#125;);</span></span><br><span class="line"><span class="code">        // this.$router.push(&quot;/&quot;);</span></span><br><span class="line"><span class="code">        alert(&quot;注册成功！&quot;)</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">    else&#123;</span></span><br><span class="line"><span class="code">        console.log(res+&quot;error-----------------------------&quot;);</span></span><br><span class="line"><span class="code">        this.$message(&#123;</span></span><br><span class="line"><span class="code">            showClose: true,</span></span><br><span class="line"><span class="code">            message: res.data.msg,</span></span><br><span class="line"><span class="code">            type: &quot;error&quot;</span></span><br><span class="line"><span class="code">        &#125;);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;);</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="section">### UserController 代码</span></span><br><span class="line"></span><br><span class="line"><span class="code">```java</span></span><br><span class="line"><span class="code">// &quot;/register1&quot; 是传递 String username, String password</span></span><br><span class="line"><span class="code">@PostMapping(&quot;/register1&quot;)</span></span><br><span class="line"><span class="code">    public ResultVO signUp(String username, String password)&#123;</span></span><br><span class="line"><span class="code">        System.out.println(&quot;register__1          :&quot;+username+password);</span></span><br><span class="line"><span class="code">        ResultVO insert = UserServiceImpl.Insert(username, password);</span></span><br><span class="line"><span class="code">        System.out.println(insert);</span></span><br><span class="line"><span class="code">        return insert;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">## 2. 使用 Map来接收前端表单传来json数据</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 原理解释：</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> json格式为 &#123;username : &quot;aaaa&quot;, password : &quot;1111&quot;&#125;，与Map格式一致，故可用Map对象接收</span><br><span class="line"></span><br><span class="line"><span class="section">### axios.post 代码</span></span><br><span class="line"></span><br><span class="line"><span class="code">```js</span></span><br><span class="line"><span class="code">this.$axios.post(&#x27;http://localhost:8090/register2&#x27;,</span></span><br><span class="line"><span class="code">                 // this.data=JSON.stringify(this.user),</span></span><br><span class="line"><span class="code">                 // this.data=this.$qs.stringify(this.user),</span></span><br><span class="line"><span class="code">                 this.data=(this.user)</span></span><br><span class="line"><span class="code">    )</span></span><br><span class="line"><span class="code">    .then(res=&gt;&#123;</span></span><br><span class="line"><span class="code">    if(res.data.code==100)&#123;</span></span><br><span class="line"><span class="code">        this.$message(&#123;</span></span><br><span class="line"><span class="code">            showClose: true,</span></span><br><span class="line"><span class="code">            message: res.data.msg,</span></span><br><span class="line"><span class="code">            type: &quot;success&quot;</span></span><br><span class="line"><span class="code">        &#125;);</span></span><br><span class="line"><span class="code">        // this.$router.push(&quot;/&quot;);</span></span><br><span class="line"><span class="code">        alert(&quot;注册成功！&quot;)</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">    else&#123;</span></span><br><span class="line"><span class="code">        console.log(res+&quot;error-----------------------------&quot;);</span></span><br><span class="line"><span class="code">        this.$message(&#123;</span></span><br><span class="line"><span class="code">            showClose: true,</span></span><br><span class="line"><span class="code">            message: res.data.msg,</span></span><br><span class="line"><span class="code">            type: &quot;error&quot;</span></span><br><span class="line"><span class="code">        &#125;);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;);</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="section">### UserController代码</span></span><br><span class="line"></span><br><span class="line"><span class="code">```java</span></span><br><span class="line"><span class="code">// &quot;register2&quot; 用Map对象接收json形式数据</span></span><br><span class="line"><span class="code">@PostMapping(&quot;/register2&quot;)</span></span><br><span class="line"><span class="code">    public ResultVO signUp(@RequestBody Map&lt;String,String&gt; user)&#123;</span></span><br><span class="line"><span class="code">        System.out.println(&quot;register__2       :&quot;+user);</span></span><br><span class="line"><span class="code">        ResultVO insert = UserServiceImpl.Insert(user.get(&quot;username&quot;), user.get(&quot;password&quot;));</span></span><br><span class="line"><span class="code">        System.out.println(insert);</span></span><br><span class="line"><span class="code">        return insert;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 3.使用实体类对象接收json格式数据  (老师上课演示)</span></span><br><span class="line"></span><br><span class="line"><span class="section">### <span class="strong">**特别注意**</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 前端传递过来的数据必须和我们的bean实体对象属性一致，若不一样，我们可以在前端再定义一个和实体类属性相同的json格式对象！！！</span></span><br><span class="line"></span><br><span class="line"><span class="section">### axios.post代码</span></span><br><span class="line"></span><br><span class="line"><span class="code">```js</span></span><br><span class="line"><span class="code">// 定义一个和自己实体类属性名一样的包含帐号密码的对象</span></span><br><span class="line"><span class="code">//根据自己的实体类来，我的实体类属性帐号密码为， userName, userPasswd. 在你的环境要根据你的来！！！！！</span></span><br><span class="line"><span class="code">let nameAndPwd = &#123;</span></span><br><span class="line"><span class="code">    userName : this.user.username,</span></span><br><span class="line"><span class="code">    userPasswd: this.user.password </span></span><br><span class="line"><span class="code">&#125;;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">// post请求</span></span><br><span class="line"><span class="code">this.$axios.post(&#x27;http://localhost:8090/register3&#x27;,this.data=nameAndPwd)</span></span><br><span class="line"><span class="code">    .then(res=&gt;&#123;</span></span><br><span class="line"><span class="code">    if(res.data.code==100)&#123;</span></span><br><span class="line"><span class="code">        this.$message(&#123;</span></span><br><span class="line"><span class="code">            showClose: true,</span></span><br><span class="line"><span class="code">            message: res.data.msg,</span></span><br><span class="line"><span class="code">            type: &quot;success&quot;</span></span><br><span class="line"><span class="code">        &#125;);</span></span><br><span class="line"><span class="code">        // this.$router.push(&quot;/&quot;);</span></span><br><span class="line"><span class="code">        alert(&quot;注册成功！&quot;)</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">    else&#123;</span></span><br><span class="line"><span class="code">        console.log(res+&quot;error-----------------------------&quot;);</span></span><br><span class="line"><span class="code">        this.$message(&#123;</span></span><br><span class="line"><span class="code">            showClose: true,</span></span><br><span class="line"><span class="code">            message: res.data.msg,</span></span><br><span class="line"><span class="code">            type: &quot;error&quot;</span></span><br><span class="line"><span class="code">        &#125;);</span></span><br><span class="line"><span class="code">        // alert(&#x27;131 row error&#x27;);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="code">```java</span></span><br><span class="line"><span class="code">//  使用对象接收必须保证表单属性 和 实体类的属性相同</span></span><br><span class="line"><span class="code">    @PostMapping(&quot;/register3&quot;)</span></span><br><span class="line"><span class="code">    public ResultVO signUp(@RequestBody User user)&#123;</span></span><br><span class="line"><span class="code">        System.out.println(&quot;register__3       :&quot;+user);</span></span><br><span class="line"><span class="code">        ResultVO insert = UserServiceImpl.Insert(user.getUserName(), user.getUserPasswd());</span></span><br><span class="line"><span class="code">        System.out.println(insert);</span></span><br><span class="line"><span class="code">        return insert;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">## 4.使用JSON.stringify()</span></span><br><span class="line"></span><br><span class="line"><span class="section">### JSON.stringify()作用: </span></span><br><span class="line"></span><br><span class="line">将json格式字符串化:  &#123;username : &quot;aaaa&quot;, password : &quot;1111&quot;&#125;    ===&gt;  &#123;&quot;username&quot; : &quot;aaaa&quot;, &quot;password&quot; : &quot;1111&quot;&#125;</span><br><span class="line"></span><br><span class="line">默认表单数据（json格式）：</span><br><span class="line"></span><br><span class="line">![<span class="string">image-20230114184055776</span>](<span class="link">/home/papillon/.config/Typora/typora-user-images/image-20230114184055776.png</span>)</span><br><span class="line"></span><br><span class="line">JSON.stringify() 格式化后：</span><br><span class="line"></span><br><span class="line">![<span class="string">image-20230114192453776</span>](<span class="link">/home/papillon/.config/Typora/typora-user-images/image-20230114192453776.png</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">### 原理：</span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 将数据转化为字符串传到后端， 利用相关函数分割字符串并提取出来所需要的数据。</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**这种方法过于繁琐，且容易出错，这里不再进行演示.**</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">## PS: 前三种方法我已经测试，均可正确运行，如果有哪里说的不对的地方，欢迎大家一起讨论，一起进步！</span></span><br></pre></td></tr></table></figure><h3 id="在浏览器控制台查看-vue对象"><a href="#在浏览器控制台查看-vue对象" class="headerlink" title="在浏览器控制台查看 vue对象"></a>在浏览器控制台查看 vue对象</h3><ul><li>使用 JSON.stringify(obj),  将json格式转化为字符串格式</li></ul><h2 id="后端-springboot"><a href="#后端-springboot" class="headerlink" title="后端 springboot"></a>后端 springboot</h2><h3 id="数据格式问题"><a href="#数据格式问题" class="headerlink" title="数据格式问题"></a>数据格式问题</h3><ul><li><p>@Responebody  将json格式转化为java对象</p><blockquote><p>可以在controllor类头部加入，也可以在方法参数对象前加入</p></blockquote></li></ul><h3 id="MAVEN依赖问题"><a href="#MAVEN依赖问题" class="headerlink" title="MAVEN依赖问题"></a>MAVEN依赖问题</h3><ul><li><p>当引入的依赖集成了其他的依赖和目前依赖发生冲突时，要将含有的集成依赖注释掉，用自己原本的依赖！</p><blockquote><p>例如引入tk.mybatis集成了mybatis, 要把tk.mybatis中集成的依赖注释掉</p></blockquote></li></ul><h3 id="关于tk-mybatis找不到实体类的问题"><a href="#关于tk-mybatis找不到实体类的问题" class="headerlink" title="关于tk.mybatis找不到实体类的问题"></a>关于tk.mybatis找不到实体类的问题</h3><blockquote><p> Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: tk.mybatis.mapper.MapperException: 无法获取实体类com.example.demo.entity.User对应的表名!]</p></blockquote><ul><li>还是依赖问题，要使用springboot starter 合适版本的mybatis，并要解决依赖冲突问题，将集成的依赖注释掉。(鼠标右键转到定义)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用操作</title>
      <link href="/2024/02/09/ArchLinux/"/>
      <url>/2024/02/09/ArchLinux/</url>
      
        <content type="html"><![CDATA[<h1 id="ArchLinux"><a href="#ArchLinux" class="headerlink" title="ArchLinux"></a>ArchLinux</h1><h2 id="optimus-manager"><a href="#optimus-manager" class="headerlink" title="optimus-manager"></a>optimus-manager</h2><ul><li>在终端使用命令切换显卡</li><li>先运行 prime-offload</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换为英伟达显卡</span></span><br><span class="line">optimus-manager --switch nvidia</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换为intel核显</span></span><br><span class="line">optimus-manager --switch intel</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">无效</span></span><br><span class="line">sudo prime-select nvidia # 切换nvidia显卡</span><br><span class="line">sudo prime-select intel  # 切换intel显卡</span><br><span class="line">sudo prime-select query  # 查看当前使用的显卡</span><br></pre></td></tr></table></figure><blockquote><p>journalctl -p 3 -xb 查看系统日志</p></blockquote><ul><li>glxinfo命令可以查看当前正在使用的显卡。</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换前默认Intel</span></span><br><span class="line">[rainerosion@rains-arch ~]$ glxinfo | grep &quot;OpenGL renderer&quot;</span><br><span class="line">OpenGL renderer string: Mesa DRI Intel(R) HD Graphics 4600 (HSW GT2)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换NVIDIA显卡后</span></span><br><span class="line">[rainerosion@rains-arch ~]$ glxinfo | grep &quot;OpenGL renderer&quot;</span><br><span class="line">OpenGL renderer string: GeForce GTX 950M/PCIe/SSE2</span><br><span class="line">  </span><br></pre></td></tr></table></figure><ul><li>查看驱动版本信息</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls /usr/src | grep nvidia</span><br></pre></td></tr></table></figure><ul><li>查看显卡</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lspci -k | grep -A 2 -E &quot;(VGA|3D)&quot;</span><br></pre></td></tr></table></figure><h2 id="切换nvidia驱动后重启无法进入图形界面"><a href="#切换nvidia驱动后重启无法进入图形界面" class="headerlink" title="切换nvidia驱动后重启无法进入图形界面"></a>切换nvidia驱动后重启无法进入图形界面</h2><blockquote><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">按ctrl+alt+f2进入命令行，输入用户名密码进入（建议），输入命令nvidia-smi查看显卡是否运行正常</span><br><span class="line"></span><br><span class="line">运行nvidia-xconfig生成配置</span><br><span class="line">输入lspci | grep -E &quot;VGA|3D&quot;查看你的显卡PCI地址，</span><br><span class="line">将类似图中每行最前面的00.02.0转换成PCI:0:2:0，填在下面代码块中BusID那里，我使用的是NVIDIA，按照图中应该为PCI:1:0:0。将下面代码块添加到/etc/X11/xorg.conf文件中（同理，如果你是使用nvidia-xconfig后无法进入图形界面，你可以（删除/etc/X11/xorg.conf来重新进入图形界面）谨慎操作！！！）：</span><br><span class="line">Section &quot;Module&quot;</span><br><span class="line"><span class="code">    Load &quot;modesetting&quot;</span></span><br><span class="line"><span class="code">EndSection</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">Section &quot;Device&quot;</span><br><span class="line"><span class="code">    Identifier &quot;nvidia&quot;</span></span><br><span class="line"><span class="code">    Driver &quot;nvidia&quot;</span></span><br><span class="line"><span class="code">    BusID &quot;PCI:1:0:0&quot;</span></span><br><span class="line"><span class="code">    Option &quot;AllowEmptyInitialConfiguration&quot;</span></span><br><span class="line"><span class="code">EndSection</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">编辑/usr/share/sddm/scripts/Xsetup文件，将下列内容添加到文件中</span><br><span class="line">xrandr --setprovideroutputsource modesetting NVIDIA-0</span><br><span class="line">xrandr --auto</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">## 切换回intel</span></span><br><span class="line"></span><br><span class="line">sudo vim /etc/optimus-manager/optimus-manager.conf</span><br><span class="line"></span><br><span class="line">修改 startup<span class="emphasis">_mode=integrated  后 注销</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">## 登录选择位置</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">/usr/share/xsessions</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">## nmcli 连接wifi</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">nmcli dev 查看网络设备</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">nmcli r wifi on 打开wifi</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">nmcli r wifi off 关闭wifi</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">nmcli dev wifi 扫描wifi </span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">1. 创建wifi连接</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">$ nmcli device wifi connect &#123;wifi名&#125; password &#123;密码&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">2. 删除wifi连接</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">$ nmcli con del &#123;wifi名&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">3. 启用wifi连接</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">$ nmcli connection up &#123;wifi名&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">$ nmcli device con &#123;网卡名&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"> 4.查看已有连接</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">$ nmcli con</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">* 若报错`Error: Connection activation failed: (7) Secrets were required, but not provided.` 删除连接记录</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">```shell</span></span><br><span class="line"><span class="emphasis">$ nmcli c </span></span><br><span class="line"><span class="emphasis">NAME                UUID                                  TYPE      DEVICE</span></span><br><span class="line"><span class="emphasis">eno1                3e755f37-3cff-314d-bb1b-4efebb6ce566  ethernet  eno1</span></span><br><span class="line"><span class="emphasis">OpenWrt             14ad438b-9b2b-43c6-a3d1-66dd3bb987dc  wifi      --</span></span><br><span class="line"><span class="emphasis">$ nmcli c delete OpenWrt</span></span><br><span class="line"><span class="emphasis">Connection &#x27;OpenWrt&#x27; (14ad438b-9b2b-43c6-a3d1-66dd3bb987dc) successfully deleted.</span></span><br><span class="line"><span class="emphasis">$ nmcli device wifi connect &quot;OpenWrt&quot; password 00000000</span></span><br><span class="line"><span class="emphasis">Device &#x27;wlp58s0&#x27; successfully activated with &#x27;180a3ce4-ba1f-405a-94f1-684e538a7be9&#x27;.</span></span><br></pre></td></tr></table></figure></blockquote><p>但是隐藏了SSID的则需要额外操作，如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmcli c add type wifi con-name &quot;自定义连接名称&quot; ifname &quot;无线网卡名称&quot; ssid &quot;WiFi的名字&quot;</span><br><span class="line">nmcli con modify &quot;自定义连接名称&quot; wifi-sec.key-mgmt wpa-psk</span><br><span class="line">nmcli con modify &quot;自定义连接名称&quot; wifi-sec.psk &quot;WiFi的密码&quot;</span><br><span class="line">nmcli con up &quot;自定义连接名称&quot;</span><br></pre></td></tr></table></figure><p>查看网卡信息：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看网卡信息：</span></span><br><span class="line">nmcli dev show wlp7s0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建网卡</span></span><br><span class="line">nmcli connection add type bridge ifname br0 stp no</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看桥接绑定信息</span></span><br><span class="line">brctl show</span><br></pre></td></tr></table></figure><h2 id="创建证书连接"><a href="#创建证书连接" class="headerlink" title="创建证书连接"></a>创建证书连接</h2><blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmcli connection add \</span><br><span class="line"> type wifi con-name &quot;IMUNET-NG&quot; ifname wlp7s0 ssid &quot;IMUNET-NG&quot; -- \</span><br><span class="line"> wifi-sec.key-mgmt wpa-eap 802-1x.eap ttls \</span><br><span class="line"> 802-1x.phase2-auth mschapv2 802-1x.identity &quot;32309140&quot; \</span><br><span class="line"> 802-1x.password &quot;131539&quot;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">启动时(第一次)：</span><br><span class="line">nmcli --ask connection up IMUNET-NG</span><br></pre></td></tr></table></figure></blockquote><h2 id="nmcli-创建网桥"><a href="#nmcli-创建网桥" class="headerlink" title="nmcli  创建网桥"></a>nmcli  创建网桥</h2><p>注意: 仅有线网卡可以</p><ol><li>添加新的网桥： <code>nmcli connection add type bridge con-name virbr0 ifname virbr0 autoconnect yes</code></li><li>创建子网卡： <code>nmcli con add type bridge-slave ifname $&#123;网卡名&#125; master $&#123;网桥名&#125;</code></li><li>打开 br0： <code>nmcli con up br0</code></li><li></li></ol><h2 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h2><p>netstat -anp | grep 端口号</p><p>lsof  -i: 端口号</p><p>ps -ef 查看进程</p><p>w , tty</p><p>pkill 命令：杀死终端中所有命令 - pkill -9 -t pts&#x2F;0</p><h2 id="patch补丁"><a href="#patch补丁" class="headerlink" title="patch补丁"></a>patch补丁</h2><blockquote><p> Reversed (or previously applied) patch detected! Assume -R? [n]</p></blockquote><ul><li><code>-t</code>：该参数遇到这种情况直接将打过补丁的文件恢复原样，即未打补丁之前的状态</li><li><code>-f</code>：该参数遇到这种情况则继续打补丁，当然一般情况下会报错，毕竟对比不一致了</li><li><code>-N</code>：忽略该文件</li></ul><p>基本命令语法：<br>　　patch [-R] {-p(n)} [–dry-run] &lt; patch_file_name<br>　　p：为path的缩写。<br>　　n：指将patch文件中的path第n条’&#x2F;’及其左边部分取消。<br>　　-R：卸载patch包。<br>　　–dry-run：尝试patch软件，并不真正修改软件。</p><p>　　例如：</p><p>　　$ patch -p1 &lt; &#x2F;home&#x2F;sense&#x2F;patch-2.6.19.1      安装补丁<br>　　$ patch -p1 -R &lt; &#x2F;home&#x2F;sense&#x2F;patch-2.6.19.1 卸载补丁</p><h2 id="DPI设置"><a href="#DPI设置" class="headerlink" title="DPI设置"></a>DPI设置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">~/.Xresources</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认96</span></span><br><span class="line">Xft.dpi: 192</span><br><span class="line">xrdb -merge /home/papillon/.Xresources</span><br></pre></td></tr></table></figure><p>应用程序缩放：</p><blockquote><p>–force-device-scale-factor&#x3D;2 </p></blockquote><h2 id="双屏设置"><a href="#双屏设置" class="headerlink" title="双屏设置"></a>双屏设置</h2><blockquote><p>xrandr –output eDP-1-1 –primary –mode 3840x2160 –scale 1x1 –output DP-0 –mode 1920x1080 –scale 2x2 –left-of eDP-1-1 </p></blockquote><h2 id="向日葵启动"><a href="#向日葵启动" class="headerlink" title="向日葵启动"></a>向日葵启动</h2><blockquote><p>sudo systemctl start runsunloginclient.service </p><p>sudo systemctl enable runsunloginclient.service</p></blockquote><h2 id="chrome-代理"><a href="#chrome-代理" class="headerlink" title="chrome 代理"></a>chrome 代理</h2><ol><li><code>sudo google-chrome --proxy-server=&quot;127.0.0.1:8080&quot; --no-sandbox</code></li><li>使用代理插件</li></ol><h2 id="调整透明度"><a href="#调整透明度" class="headerlink" title="调整透明度"></a>调整透明度</h2><blockquote><ul><li>xprop 点击窗口获取窗口信息 WM_CLASS(STRING) 后的内容</li><li>vim ~&#x2F;.config&#x2F;picom&#x2F;picom.conf </li><li>在透明度中新加一行更改指定透明度</li></ul></blockquote><h2 id="调节音量"><a href="#调节音量" class="headerlink" title="调节音量"></a>调节音量</h2><p>alsamixer</p><blockquote><p>pgup&#x2F;pgdowm 增减音量</p><p>1~9 调节音量到 10%-90%</p></blockquote><h2 id="调节屏幕亮度"><a href="#调节屏幕亮度" class="headerlink" title="调节屏幕亮度"></a>调节屏幕亮度</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">手动切换</span></span><br><span class="line">切换root用户</span><br><span class="line">cd /sys/class/backlight/intel_backlight</span><br><span class="line">echo 0~512 &gt; brightness</span><br><span class="line"></span><br><span class="line">sudo pacman -S acpilight</span><br><span class="line">sudo gpasswd video -a 用户名 # 将当前用户添加到video实现免root控制亮度</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取当前亮度</span></span><br><span class="line">xbacklight -get</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置亮度</span></span><br><span class="line">xbacklight -set 70</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加亮度</span></span><br><span class="line">xbacklight -inc 10</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">减少亮度</span></span><br><span class="line">xbacklight -dec 10</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="切换内核"><a href="#切换内核" class="headerlink" title="切换内核"></a>切换内核</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改 grub 配置不是必须的，下面那个才是必须的。</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo nano /etc/default/grub</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这三行是将子菜单展开，这样不用点击 advanced 进去了</span></span><br><span class="line">GRUB_DISABLE_SUBMENU=y</span><br><span class="line">GRUB_DEFAULT=saved</span><br><span class="line">GRUB_SAVEDEFAULT=true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">等待时间我之前设置为 0s 的，0 就不显示了，这里改大一点 3s</span></span><br><span class="line">GRUB_TIMEOUT=3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">改完保存退出 -----------------------------------------</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新下 grub 的配置文件，让上面的设置生效，这一步是一定要做的。</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo grub-mkconfig -o /boot/grub/grub.cfg</span></span><br><span class="line">正在生成 grub 配置文件 ...</span><br><span class="line">找到 Linux 镜像：/boot/vmlinuz-linux-lts</span><br><span class="line">找到 initrd 镜像：/boot/amd-ucode.img /boot/initramfs-linux-lts.img</span><br><span class="line">Found fallback initrd image(s) in /boot:  amd-ucode.img initramfs-linux-lts-fallback.img</span><br><span class="line">找到 Linux 镜像：/boot/vmlinuz-linux</span><br><span class="line">找到 initrd 镜像：/boot/amd-ucode.img /boot/initramfs-linux.img</span><br><span class="line">Found fallback initrd image(s) in /boot:  amd-ucode.img initramfs-linux-fallback.img</span><br><span class="line">警告： os-prober will not be executed to detect other bootable partitions.</span><br><span class="line">Systems on them will not be added to the GRUB boot configuration.</span><br><span class="line">Check GRUB_DISABLE_OS_PROBER documentation entry.</span><br><span class="line">Adding boot menu entry for UEFI Firmware Settings ...</span><br><span class="line">完成</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="救援模式"><a href="#救援模式" class="headerlink" title="救援模式"></a>救援模式</h2><p>linux系统奔溃后的紧急救援模式<br>当 Linux 系统奔溃时，可以进入紧急救援模式（emergency mode）来检查和修复系统问题。以下是进入紧急救援模式的步骤：</p><p>在启动 GRUB 时，选择要启动的 Linux 内核。</p><p>按下 e 键进入编辑模式，在 kernel 行的末尾添加 single 或 emergency。</p><p>按下 Ctrl + X 启动系统。</p><p>系统会自动进入救援模式，此时会提示输入 root 用户密码，输入密码后即可进入救援模式。</p><p>在救援模式下，可以进行以下操作：</p><p>检查文件系统：使用 fsck 命令检查文件系统，并修复错误。</p><p>挂载文件系统：使用 mount 命令挂载文件系统，使得可以访问文件系统中的文件。</p><p>修改密码：使用 passwd 命令修改用户密码。</p><p>网络配置：使用 ifconfig 命令配置网络。</p><p>安装软件：使用 yum 或 apt-get 命令安装软件。</p><p>退出救援模式：使用 exit 命令退出救援模式，重新启动系统。</p><h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><ul><li><strong>关机</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shutdown -h 0 #&lt;==O秒后关机</span><br><span class="line">shutdown -h now #&lt;==现在关机</span><br><span class="line">shutdown -h 10 #&lt;==10分钟后关机</span><br><span class="line">shutdown -h 23:20 #&lt;==23：20分关机</span><br><span class="line">shutdown -c #&lt;==取消shutdown关机命令</span><br><span class="line">init 0 #&lt;==立马关机（切换运行级别为0，推荐使用）</span><br><span class="line">halt #&lt;==立马关机</span><br><span class="line">poweroff #&lt;==立马关机</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>重启</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shutdown -r now #&lt;==现在重启</span><br><span class="line">shutdown -r 23:20 &amp; #&lt;==23：20分重启，加&amp;符号代表把该命令转到后台处理</span><br><span class="line">reboot #&lt;==立马重启（推荐使用）</span><br><span class="line">init 6 #&lt;==立马重启（切换运行级别为6，推荐使用）</span><br></pre></td></tr></table></figure><ul><li><strong>注销</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">logout #&lt;==立马注销</span><br><span class="line">exit #&lt;==立马注销</span><br><span class="line">在SecureCRT软件中，按快捷键：Ctrl + d #&lt;==推荐使用</span><br></pre></td></tr></table></figure><h2 id="切换java版本"><a href="#切换java版本" class="headerlink" title="切换java版本"></a>切换java版本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看archlinux-java使用说明</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">archlinux-java --<span class="built_in">help</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看jdk状态</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">archlinux-java status</span></span><br><span class="line"></span><br><span class="line">Available Java environments:</span><br><span class="line">  java-11-openjdk</span><br><span class="line">  java-8-openjdk (default)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取默认jdk</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">archlinux-java get</span></span><br><span class="line"></span><br><span class="line">java-8-openjdk</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置默认jdk</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo archlinux-java <span class="built_in">set</span> java-11-openjdk</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看切换后的jdk版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">java -version</span></span><br><span class="line"></span><br><span class="line">openjdk version &quot;11.0.13&quot; 2021-10-19</span><br><span class="line">OpenJDK Runtime Environment (build 11.0.13+8)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 11.0.13+8, mixed mode)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="crontab脚本"><a href="#crontab脚本" class="headerlink" title="crontab脚本"></a>crontab脚本</h2><blockquote><ul><li>-e : 执行文字编辑器来设定时程表，内定的文字编辑器是 VI，如果你想用别的文字编辑器，则请先设定 VISUAL 环境变数来指定使用那个文字编辑器(比如说 setenv VISUAL joe)</li><li>-r : 删除目前的时程表</li><li>-l : 列出目前的时程表</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">min hour day mon week program</span><br></pre></td></tr></table></figure><table><thead><tr><th>每分钟定时执行一次</th><th>* * * * *</th></tr></thead><tbody><tr><td>每小时定时执行一次</td><td>0 * * * *</td></tr><tr><td>每天定时执行一次</td><td>0 0 * * *</td></tr><tr><td>每周定时执行一次</td><td>0 0 * * 0</td></tr><tr><td>每月定时执行一次</td><td>0 0 1 * *</td></tr><tr><td>每月最后一天定时执行一次</td><td>0 0 L * *</td></tr><tr><td>每年定时执行一次</td><td>0 0 1 1 *</td></tr></tbody></table></blockquote><ul><li>要确保有对目标文件的权限</li><li>命令要使用绝对路径</li></ul><h2 id="Top"><a href="#Top" class="headerlink" title="Top"></a>Top</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">c： 显示完整的命令</span><br><span class="line">d： 更改刷新频率</span><br><span class="line">f： 增加或减少要显示的列(选中的会变成大写并加*号)</span><br><span class="line">F： 选择排序的列</span><br><span class="line">h： 显示帮助画面</span><br><span class="line">H： 显示线程</span><br><span class="line">i： 忽略闲置和僵死进程</span><br><span class="line">k： 通过给予一个PID和一个signal来终止一个进程。（默认signal为15。在安全模式中此命令被屏蔽）</span><br><span class="line">l:  显示平均负载以及启动时间（即显示影藏第一行）</span><br><span class="line">m： 显示内存信息</span><br><span class="line">M： 根据内存资源使用大小进行排序</span><br><span class="line">N： 按PID由高到低排列</span><br><span class="line">o： 改变列显示的顺序</span><br><span class="line">O： 选择排序的列，与F完全相同</span><br><span class="line">P： 根据CPU资源使用大小进行排序</span><br><span class="line">q： 退出top命令</span><br><span class="line">r： 修改进程的nice值(优先级)。优先级默认为10，正值使优先级降低，反之则提高的优先级</span><br><span class="line">s： 设置刷新频率（默认单位为秒，如有小数则换算成ms）。默认值是5s，输入0值则系统将不断刷新</span><br><span class="line">S： 累计模式（把已完成或退出的子进程占用的CPU时间累计到父进程的MITE+ ）</span><br><span class="line">T： 根据进程使用CPU的累积时间排序</span><br><span class="line">t： 显示进程和CPU状态信息（即显示影藏CPU行）</span><br><span class="line">u： 指定用户进程</span><br><span class="line">W： 将当前设置写入~/.toprc文件，下次启动自动调用toprc文件的设置</span><br><span class="line">&lt;： 向前翻页</span><br><span class="line">&gt;： 向后翻页</span><br><span class="line">?： 显示帮助画面</span><br><span class="line">1(数字1)： 显示每个CPU的详细情况</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#上传本地文件夹到Linux</span><br><span class="line">scp -r -p 22 &#123;本地文件夹&#125; Linux用户名@ip地址:Linux绝对路径</span><br><span class="line">#上传文件</span><br><span class="line">scp -p 22 &#123;本地文件&#125; Linux用户名@ip地址:Linux绝对路径</span><br><span class="line"></span><br><span class="line"># 上传</span><br><span class="line">去掉指定端口号参数-p, 并将上述路径舒徐调换即可</span><br><span class="line"></span><br><span class="line">#下载</span><br><span class="line">scp -p 22 linux用户名@ipdizhi:文件路径 &#123;本地路径&#125;</span><br></pre></td></tr></table></figure><h2 id="ln-软链接"><a href="#ln-软链接" class="headerlink" title="ln 软链接"></a>ln 软链接</h2><p>ln -s 【目标目录】 【软链接地址】</p><p>目标目录】指软连接指向的目标目录下，【软链接地址】指“快捷键”文件名称，该文件是被指令创建的。</p><p>rm -rf 【软链接地址】</p><p>ln -snf 【新目标目录】 【软链接地址】</p><h2 id="ROFI-Script"><a href="#ROFI-Script" class="headerlink" title="ROFI Script"></a>ROFI Script</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><blockquote><p>rofi -show [mine] -modi “mine:~&#x2F;scripts&#x2F;rofi.sh”</p></blockquote><p>返回选中的文本</p><blockquote><p>ls | rofi -dmenu </p><p>history | rofi -dmenu.    h&#x3D;$(history | rofi -dmenu)</p></blockquote><h2 id="屏蔽磁盘"><a href="#屏蔽磁盘" class="headerlink" title="屏蔽磁盘"></a>屏蔽磁盘</h2><p>1　启动后的禁用 无需重启</p><p>　（sdx是你的磁盘 udev的更新可能会导致磁盘重新出现 在向系统添加&#x2F;删除磁盘也可能会改变）</p><blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">echo <span class="number">1</span>&gt;<span class="regexp">/sys/</span>block/sdx/device/<span class="keyword">delete</span> </span><br></pre></td></tr></table></figure></blockquote><p>2　基本上你创建一个文件<code>/etc/udev/rules.d/99-hide-disks.rules</code> ，你在其中放置该行</p><blockquote><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">KERNEL</span>==<span class="string">&quot;sda1&quot;</span>, ENV&#123;UDISKS_PRESENTATION_HIDE&#125;=<span class="string">&quot;1&quot;</span> </span><br></pre></td></tr></table></figure></blockquote><p>　 其中<em>sda1</em>是您要隐藏的分区的名称。 在某些系统中它也可以</p><blockquote><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">KERNEL</span>==<span class="string">&quot;sda1&quot;</span>, ENV&#123;UDISKS_IGNORE&#125;=<span class="string">&quot;1&quot;</span> </span><br></pre></td></tr></table></figure></blockquote><p>   然后你重新启动。</p><h2 id="QQ闪退"><a href="#QQ闪退" class="headerlink" title="QQ闪退"></a>QQ闪退</h2><blockquote><p>文件问题： sudo chattr +i ~&#x2F;.config&#x2F;QQ&#x2F;crash_files&#x2F;</p><p>代理问题： 不要走代理</p></blockquote><h1 id="pacman"><a href="#pacman" class="headerlink" title="pacman"></a>pacman</h1><h2 id="强制安装"><a href="#强制安装" class="headerlink" title="强制安装"></a>强制安装</h2><blockquote><p>pacman -S –overwrite ‘<em>‘ 要覆盖的文件模式</em>*</p></blockquote><h2 id="在-Arch-Linux-上安装-Debtap"><a href="#在-Arch-Linux-上安装-Debtap" class="headerlink" title="在 Arch Linux 上安装 Debtap"></a>在 Arch Linux 上安装 Debtap</h2><blockquote><p>要安装 Debtap，启动终端并使用 AUR 助手安装它：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;yay -S debtap</span><br><span class="line">&gt;sudo debtap -u</span><br></pre></td></tr></table></figure><p>使用 cd 命令进入 DEB 文件的目录并使用 Debtap 开始转换包。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;cd ~/Downloads</span><br><span class="line">&gt;debtap yourfile.deb</span><br></pre></td></tr></table></figure><p>Debtap 将创建一个“<strong>你的文件.zst</strong>” 文件，您可以使用包管理器轻松安装，在本例中为 pacman。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;sudo pacman -U yourfile.zst</span><br></pre></td></tr></table></figure></blockquote><h2 id="使用dpkg"><a href="#使用dpkg" class="headerlink" title="使用dpkg"></a>使用dpkg</h2><blockquote><ol><li>安装dpkg</li><li>使用dpkg安装deb包</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;yay -S dpkg</span><br><span class="line">&gt;dpkg -i .deb包名</span><br></pre></td></tr></table></figure></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>pacmam -U package.pkg.tar.gz 从安装本地package包</p><h2 id="多线程编译"><a href="#多线程编译" class="headerlink" title="多线程编译"></a>多线程编译</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/makepkg.conf </span><br></pre></td></tr></table></figure><p>找到 MAKEFLAGS 参数,修改 -j 后面的参数为想要用多少个核编译,保持并退出</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">MAKEFLAGS=&quot;-j8&quot;</span><br></pre></td></tr></table></figure><h2 id="代理问题"><a href="#代理问题" class="headerlink" title="代理问题"></a>代理问题</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 http 代理</span></span><br><span class="line">export http=http://127.0.0.1:7890</span><br><span class="line">export https=http://127.0.0.1:7890</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或, 设置 socket 代理(clash)</span></span><br><span class="line">export http_proxy=socks5://127.0.0.1:7891</span><br><span class="line">export https_proxy=socks5://127.0.0.1:7891</span><br></pre></td></tr></table></figure><h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote><p>带多个参数的命令 要加 command 修饰，例如</p><p><code>command gcc -g main.c -o main</code></p></blockquote><h1 id="内核编译"><a href="#内核编译" class="headerlink" title="内核编译"></a>内核编译</h1><h2 id="qemu安装"><a href="#qemu安装" class="headerlink" title="qemu安装"></a>qemu安装</h2><ol><li>i386:  qemu-system-i386</li><li>x86_64: qemu-system-x86_64</li><li>arm : qemu-system-arm</li><li>arm64: qemu-system-aarch64</li></ol><h2 id="交叉编译链安装"><a href="#交叉编译链安装" class="headerlink" title="交叉编译链安装"></a>交叉编译链安装</h2><ol><li>arm-linux-gnueabihf-</li><li>aarch64-linux-gnu-</li></ol><h2 id="编译linux内核"><a href="#编译linux内核" class="headerlink" title="编译linux内核"></a>编译linux内核</h2><blockquote><p>make ARCH&#x3D;arm64 CROSS_COMPILE&#x3D;aarch64-linux-gnu- defconfig<br>make ARCH&#x3D;arm64 CROSS_COMPILE&#x3D;aarch64-linux-gnu- menuconfig<br>make ARCH&#x3D;arm64 CROSS_COMPILE&#x3D;aarch64-linux-gnu- -j 8</p></blockquote><h2 id="制作跟文件系统-busybox"><a href="#制作跟文件系统-busybox" class="headerlink" title="制作跟文件系统 busybox"></a>制作跟文件系统 busybox</h2><ol><li>下载源码，并设置对应目标的架构，编译。</li><li>qemu-img create xxx.img 4g 创建4g磁盘，使用mkfs.ext4 xxx.img 格式化<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建 1g (这个根据实际需要进行配置) 的 raw 格式的空镜像磁盘</span> </span><br><span class="line">qemu-img create rootfs.img 1g </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将创建的磁盘格式化成 ext4 类型的文件系统</span> </span><br><span class="line">mkfs.ext4 rootfs.img </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个文件用来挂载该镜像（用来将编译好的内容装入磁盘，载体）</span> </span><br><span class="line">mkdir rootfs </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 rootfs.img 挂载到 rootfs 文件夹</span> </span><br><span class="line">sudo mount -o loop rootfs.img rootfs </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将在 busybox 中编译的内容移动到刚新建的文件夹 rootfs 中(等价于拷贝到了 rootfs.img 磁盘中)</span> </span><br><span class="line">cd rootfs </span><br><span class="line">sudo cp -r ../busybox/_install/* . </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">补充一些必要的文件夹</span> </span><br><span class="line">sudo mkdir proc sys dev etc etc/init.d</span><br><span class="line"></span><br><span class="line">cd etc/init.d/ sudo touch rcS sudo vi rcS</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件内容如下</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">mount -t proc none /proc# 挂载文件系统到 /proc 目录, 它提供了一个接口来访问内核和进程信息</span><br><span class="line">mount -t sysfs none /sys# 挂载sysfs文件系统到 /sys 目录, 提供了一种方式来访问和调整内核的运行时信息</span><br><span class="line">/sbin/mdev -s# 使用mdev（是BusyBox的一部分）来初始化/dev目录，它负责创建设备节点</span><br><span class="line"># -s 告诉 mdev 启动是扫描 /sys 目录并创建设备节点 </span><br><span class="line"># /sys中包含了当前系统中硬件设备的详细信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo chmod +x rcS</span><br><span class="line"></span><br><span class="line">cd ../..</span><br><span class="line">sudo umount rootfs</span><br></pre></td></tr></table></figure></li></ol><h2 id="qemu启动系统"><a href="#qemu启动系统" class="headerlink" title="qemu启动系统"></a>qemu启动系统</h2><p><code>qemu-system-aarch64 -M virt -cpu cortex-a57 -m 256M -nographic -kernel ../linux-6.7/arch/arm64/boot/Image -drive file=rootfs.img,format=raw,id=hd0,if=none -device virtio-blk-device,drive=hd0 -append &quot;root=/dev/vda rw console=ttyAMA0&quot; </code></p><h2 id="虚拟机和宿主机通讯"><a href="#虚拟机和宿主机通讯" class="headerlink" title="虚拟机和宿主机通讯"></a>虚拟机和宿主机通讯</h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FPGA随笔</title>
      <link href="/2024/02/09/FPGA/"/>
      <url>/2024/02/09/FPGA/</url>
      
        <content type="html"><![CDATA[<h1 id="FGPA"><a href="#FGPA" class="headerlink" title="FGPA"></a>FGPA</h1><h2 id="整体过程"><a href="#整体过程" class="headerlink" title="整体过程"></a>整体过程</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">编写 Verilog (.v) 文件：</span><br><span class="line"></span><br><span class="line">使用 Verilog 或其他支持的硬件描述语言编写您的 FPGA 设计代码。Verilog 文件描述了电路的行为和结构。</span><br><span class="line">编写 Constraint (.cst) 文件：</span><br><span class="line"></span><br><span class="line">编写约束文件，也称为约束条件文件。该文件描述了时序、引脚分配、时钟频率等约束条件，以确保设计在 FPGA 上正确运行。</span><br><span class="line">综合：</span><br><span class="line"></span><br><span class="line">使用综合工具，如 Yosys，将 Verilog 代码转换为逻辑网表。综合工具将分析和优化设计，并生成逻辑网表文件。</span><br><span class="line">实现：</span><br><span class="line"></span><br><span class="line">使用物理设计工具（例如 nextpnr, Vivado、Quartus Prime、iCEcube2 等），将逻辑网表映射到目标 FPGA 设备的物理资源上。该步骤包括布局（将逻辑元件放置在 FPGA 芯片上的位置）和布线（将逻辑元件之间的连线连接起来）。</span><br><span class="line">生成 Bitstream 文件：</span><br><span class="line"></span><br><span class="line">在实现步骤完成后，生成 FPGA 设备可识别的 Bitstream 文件。Bitstream 文件包含了将设计配置到 FPGA 芯片上所需的详细信息，例如逻辑元件的位置、连线信息和时钟设置。</span><br><span class="line">配置 FPGA 开发板：</span><br><span class="line"></span><br><span class="line">将生成的 Bitstream 文件加载到 FPGA 开发板上。这通常需要使用特定的软件工具或命令行工具，例如 Vivado Hardware Manager、Quartus Programmer 或 openFPGALoader。</span><br></pre></td></tr></table></figure><h1 id="veirlog语言"><a href="#veirlog语言" class="headerlink" title="veirlog语言"></a>veirlog语言</h1><p>input&#x2F;output 参数默认是wire类型。<br>wire : 组合逻辑，不涉及时序，当电路变化时，跟着变化<br>reg : 用于时序逻辑，当电路变化时，要等到下一个时钟才变化。<br>所以 assign 赋值要比在always中赋值快一个周期。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="yosys-综合工具。"><a href="#yosys-综合工具。" class="headerlink" title="yosys: 综合工具。"></a>yosys: 综合工具。</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet"> 1.</span> 启动 Yosys：</span><br><span class="line"><span class="bullet"> -</span> 在命令行中输入 <span class="code">`yosys`</span> 命令来启动 Yosys 工具。</span><br><span class="line"></span><br><span class="line"><span class="bullet"> 2.</span> 导入设计文件：</span><br><span class="line"></span><br><span class="line"><span class="bullet">   -</span> 在 Yosys 提示符下，使用</span><br><span class="line"><span class="code">     read_verilog</span></span><br><span class="line"><span class="code">     命令导入设计文件：</span></span><br><span class="line"><span class="code">     复制</span></span><br><span class="line"><span class="code">     yosys&gt; read_verilog design.v</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> 综合设计：</span><br><span class="line"></span><br><span class="line"><span class="bullet">   -</span> 使用</span><br><span class="line"><span class="code">     synth</span></span><br><span class="line"><span class="code">     命令对设计进行综合：</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">     复制</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">     yosys&gt; synth &lt;synthesis_command&gt;</span></span><br><span class="line"><span class="code">     &lt;synthesis_command&gt;</span></span><br><span class="line"><span class="code">     表示您选择的综合命令。Yosys 支持不同的综合命令，如</span></span><br><span class="line"><span class="code">     synth_ice40</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">     （针对 Lattice iCE40 FPGA）或</span></span><br><span class="line"><span class="code">     synth_xilinx</span></span><br><span class="line"><span class="code">     （针对 Xilinx FPGA）。您可以根据目标 FPGA 平台选择适当的综合命令。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4.</span> 查看综合结果：</span><br><span class="line"><span class="bullet">   -</span> 使用</span><br><span class="line"><span class="code">     show</span></span><br><span class="line"><span class="code">     命令查看综合后的设计：</span></span><br><span class="line"><span class="code">     复制</span></span><br><span class="line"><span class="code">     yosys&gt; show</span></span><br><span class="line"><span class="code">     这将显示综合生成的逻辑网表。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">5.</span> 导出网表：</span><br><span class="line"><span class="bullet">   -</span> 使用</span><br><span class="line"><span class="code">     write_verilog</span></span><br><span class="line"><span class="code">     命令将综合后的逻辑网表导出为 Verilog 文件：</span></span><br><span class="line"><span class="code">     复制</span></span><br><span class="line"><span class="code">     yosys&gt; write_verilog synthesized.v</span></span><br><span class="line"><span class="code">     这将生成一个名为synthesized.v的文件，其中包含综合后的逻辑网表。</span></span><br></pre></td></tr></table></figure><h3 id="nextpnr-gowin-实现工具"><a href="#nextpnr-gowin-实现工具" class="headerlink" title="nextpnr-gowin: 实现工具"></a>nextpnr-gowin: 实现工具</h3><h3 id="openFPGALoader-烧录工具。"><a href="#openFPGALoader-烧录工具。" class="headerlink" title="openFPGALoader: 烧录工具。"></a>openFPGALoader: 烧录工具。</h3><h1 id="高云IDE启动过程"><a href="#高云IDE启动过程" class="headerlink" title="高云IDE启动过程"></a>高云IDE启动过程</h1><blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LD_PRELOAD=/usr/lib/libfreetype.so /opt/Gowin_V1.9/IDE/bin/gw_ide</span><br></pre></td></tr></table></figure></blockquote><h1 id="使用vscode开发环境"><a href="#使用vscode开发环境" class="headerlink" title="使用vscode开发环境"></a>使用vscode开发环境</h1><blockquote><p>OSS CAD Suite –&gt; Lushay Code(vscode插件) -&gt; 右下角 fpga toolchain</p><p>Verilog-HDL 语法高亮</p></blockquote><h1 id="iverilog-仿真"><a href="#iverilog-仿真" class="headerlink" title="iverilog 仿真"></a>iverilog 仿真</h1><ol><li>iverilog -o wave led_demo_tb.v led_demo.v</li><li>vvp -n wave -lxt2</li><li>gtkwave wave.vcdv</li></ol><h1 id="IP核"><a href="#IP核" class="headerlink" title="IP核"></a>IP核</h1><h2 id="CMT-clock-manager-tiles"><a href="#CMT-clock-manager-tiles" class="headerlink" title="CMT clock manager tiles"></a>CMT clock manager tiles</h2><p>1个CMT包含一个MMCM和1个PLL。</p><h3 id="MMCM"><a href="#MMCM" class="headerlink" title="MMCM"></a>MMCM</h3><h3 id="PPL锁相环"><a href="#PPL锁相环" class="headerlink" title="PPL锁相环"></a>PPL锁相环</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[ ] --&gt; |F_in| B(N)</span><br><span class="line">B --&gt; |F_ref| C[PFD]</span><br><span class="line">C --&gt; D[Charge Pump / Loop Filter &amp;VCO]</span><br><span class="line">D --&gt; J[F_vco]</span><br><span class="line">J --&gt; |M| C</span><br><span class="line">J --&gt; E[K]</span><br><span class="line">E --&gt; F[F_out1]</span><br><span class="line">E --&gt; G[F_out1]</span><br><span class="line">J --&gt; H[V]</span><br><span class="line">H --&gt; I[F_out2]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>N：前置分频计数器<br>PFD：相位频率检测器<br>Charge Pump：电荷泵<br>Loop Filter：环路滤波器<br>VCO：压控振荡器<br>M：反馈乘法器<br>K,V：后置分频器</p><h4 id="电路原理介绍："><a href="#电路原理介绍：" class="headerlink" title="电路原理介绍："></a>电路原理介绍：</h4><pre><code>首先Fin输入时钟，进入N预分频单元，出来的是FREF参考时钟，进入PFD频率相位检测电路，检测VCO反馈回来的时钟信号与参考时钟进行比较，然后将比较结果送入Charge，能得到一个电压信号，电压信号经过一个环路滤波器后，就是一个比较稳定的电压信号，这电压信号再来控制VCO压控振荡器，从来产生一个时钟信号Fvco，再次经过M的一个倍频，输入到PFD，这里就是一个环路反馈，不断调整达到一个平衡。当PFD=M就稳定下来，稳定下来之前需要一定时间。</code></pre><h2 id="单端口RAM"><a href="#单端口RAM" class="headerlink" title="单端口RAM"></a>单端口RAM</h2><p>输入只有一组数据线和一组地址线，只有一个时钟，读写共用地址线。</p><p>输出只有一个端口</p><p>所以单端口RAM读写操作不能同时进行</p><h2 id="伪双端口RAM"><a href="#伪双端口RAM" class="headerlink" title="伪双端口RAM"></a>伪双端口RAM</h2><p>输入只有一组数据线，两组地址线，两个时钟。</p><p>两个输出端口共用输出端口</p><p>所以一个端口只读，另一个端口只写，但写入和读取时钟可以不同，且位宽比可以不是1:1，即同时写A与读B可以速率不同。</p><h2 id="双端口RAM"><a href="#双端口RAM" class="headerlink" title="双端口RAM"></a>双端口RAM</h2><p>输入有两组地址线和两组数据线，两个时钟。</p><p>输出有两个分别的数据线</p><p>所以双端口RAM两个端口都可以分别读写，彼此互不干扰</p>]]></content>
      
      
      <categories>
          
          <category> FPGA </category>
          
          <category> gowin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FPGA </tag>
            
            <tag> Verilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32笔记</title>
      <link href="/2024/02/09/STM32/"/>
      <url>/2024/02/09/STM32/</url>
      
        <content type="html"><![CDATA[<h1 id="STM32"><a href="#STM32" class="headerlink" title="STM32"></a>STM32</h1><h2 id="常见术语"><a href="#常见术语" class="headerlink" title="常见术语"></a>常见术语</h2><p>VDD: 电源正极 高电平<br>VSS: 电源负极 低电平</p><h2 id="位操作"><a href="#位操作" class="headerlink" title="位操作"></a>位操作</h2><p>P置位第n位: P |&#x3D; (1 &lt;&lt; n)<br>Q清零第n位: Q &amp;&#x3D; ~(1 &lt;&lt; n)<br>R反转第n位: R ^&#x3D; (1 &lt;&lt; n)</p><h3 id="位带操作"><a href="#位带操作" class="headerlink" title="位带操作"></a>位带操作</h3><p>转换: (Addr &amp; 0xF0000000)+0x02000000+((Addr &amp; 0x00ffffff)&lt;&lt;5) + (n&lt;&lt;2)</p><blockquote><p>内存映射是对地址的封装，直接操作内存也可以实现。</p></blockquote><h2 id="引脚分类"><a href="#引脚分类" class="headerlink" title="引脚分类"></a>引脚分类</h2><p>电源<br>晶振IO<br>BOOT IO<br>复位IO<br>以上IO组成的系统称最小系统</p><h2 id="RCC"><a href="#RCC" class="headerlink" title="RCC"></a>RCC</h2><ol><li>RCC_CR</li><li>RCC_CFGR</li><li>RCC_CIR</li><li>RCC_APB2RSTR</li><li>RCC_APB1RSTR</li><li>RCC_AHBENR</li><li>RCC_AHBENR</li><li>RCC_AHB2ENR</li><li>RCC_AHB1ENR</li><li>RCC_BDCR</li><li>RCC_CSR</li></ol><h2 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO:"></a>GPIO:</h2><p>专用总线:I2C, SPI, SDIO, FSMC, DCMI<br>普通总线: 蜂鸣器, LED, 按键</p><h3 id="寄存器描述"><a href="#寄存器描述" class="headerlink" title="寄存器描述"></a>寄存器描述</h3><ol><li>CRL 配置低寄存器</li><li>CRH 配置高寄存器</li><li>ODR 输入数据寄存器</li><li>IDR 输入数据寄存器</li><li>BSRR 位设置&#x2F;清楚寄存器</li><li>BRR 位清除寄存器</li><li>LCKR 配置锁定寄存器</li></ol><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">1. 模拟输入: 不经过施密特触发器(TTL)直接接入</span><br><span class="line">2. 浮空输入: 即高阻输入,相当于电压表。但外界没有输入时，容易受到外界电磁干扰.</span><br><span class="line">3. 下拉输入: 无输入信号时端口电平被拉到低电平</span><br><span class="line">4. 上拉输入: 无输入信号时端口电平被拉到高电平</span><br><span class="line">5. 开漏输出: 只能输出低电平，只有接上拉电阻才能输出1。好处是更换外部电源即可以更改输出电源。</span><br><span class="line">6. 推挽输出: 可以输出高低电平,高电平由VDD决定,低电平由VSS决定。由两个三极管互补信号控制,电流大,驱动能力强.</span><br><span class="line">7. 复用开漏输出: 数据来自片上外设,而普通开漏输出来自输出数据寄存器(ODR)数据</span><br><span class="line">8. 复用推挽输出: 同上</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="IWDG-独立看门狗"><a href="#IWDG-独立看门狗" class="headerlink" title="IWDG 独立看门狗"></a>IWDG 独立看门狗</h2><p>递减计数器到0后，会自动复位，所以启用iwdg后要及时重装载计数器的值。12位，最大4096</p><p>是异常处理的最后手段，不可依赖，应在设计时尽量避免异常的发生。</p><p>没有中断，而WWDG有。</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>启用iwdg后，LSI(内部低速时钟40khz)会自动开启</p><p>键寄存器iwdg_kr</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">写入0xAAAA,喂狗</span><br><span class="line">写入0x5555,解除pr和rlr寄存器的写保护</span><br><span class="line">写入0xCCCC,启用iwdg工作</span><br></pre></td></tr></table></figure><p>预分频寄存器iwdg_pr,设置时钟的预分频系数。psc&#x3D;4*2^prer.</p><p>重装载寄存器iwdg_rlr,存放重装载值，低12位有效。</p><p>状态寄存器iwdg_sr,用于判断预分频值和重装载值是否已经被更改。</p><h3 id="溢出时间计算"><a href="#溢出时间计算" class="headerlink" title="溢出时间计算"></a>溢出时间计算</h3><p>$$<br>T (out)&#x3D;\frac{psc<em>rlr}{f_{iwdg}}&#x3D;\frac{4</em>2^{prer}*rlr}{f_{iwdg}}， f_{iwdg}:iwdg的时钟频率<br>$$</p><h2 id="WWDG-窗口看门狗"><a href="#WWDG-窗口看门狗" class="headerlink" title="WWDG 窗口看门狗"></a>WWDG 窗口看门狗</h2><p>主要用于检测软件异常</p><p>递减计数器，能产生系统复位信号和提前唤醒中断.</p><p>计数器从0x40减到0x3F时产生复位（即T6位跳变到0）</p><p>计数器值大于W[6:0]时喂狗会复位</p><p>提前唤醒中断(EWI):计数器等于0x40时可产生</p><p>在窗口期内重装载计数器的值，防止复位。</p><p>使用PCLK1外部总线时钟，计数器寄存器7位，最大127~63</p><h3 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h3><p>T[6:0]从0x7F(127)开始递减计数，减到W[6:0] (窗口上限值，大于这个值时喂狗会产生复位，在上限值和下限值之间喂狗不会产生复位)，减到0x40(64)时可产生中断，减到0x3F(63)(窗口下限值)，产生复位。</p><h3 id="超时时间计算"><a href="#超时时间计算" class="headerlink" title="超时时间计算"></a>超时时间计算</h3><p>WWDG_CR控制寄存器，[6:0]有效，计数器（MSB到LSB，T6为0会产生复位）,[7]是WDGA 激活位，<code>0:禁用WWDG；1:使能看门狗</code> </p><p>WWDG_CFR:配置寄存器。T9 ：提前唤醒终端，计数器递减到0x40时产生中断，此中断中有复位后才能由硬件清零（还要使能NVIC）。T8:7 WDGTB:定时器时基。 2^WDGTB^计算分频器</p><p>WWDG_SR 状态寄存器。T0 EWIF： 提前唤醒中断标志，当计数器递减到0x40时由硬件置1.且只能由软件方式写0，如果不使能EWIF，此位也为1. 使能EWIF，信号会传到NVIC。</p><p>4096是固定预分频系数</p><h3 id="WWDG超时间计算"><a href="#WWDG超时间计算" class="headerlink" title="WWDG超时间计算"></a>WWDG超时间计算</h3><p>$$<br>T_{out}&#x3D;\frac{4096<em>2^{WDGTB}</em>(T[5:0]+1)}{F_{wwdg}}<br>$$</p><h3 id="WWDG配置步骤"><a href="#WWDG配置步骤" class="headerlink" title="WWDG配置步骤"></a>WWDG配置步骤</h3><ol><li>WWDG工作参数初始化 HAL_WWDG_Init()</li><li>WWDG MSP初始化 HAL_WWDG_MspInit() 配置NVIC,Clock等</li><li>设置优先级，使能中断 HAL_NVIC_SetPriority() HAL_NVIC_Enable</li><li>编写中断服务函数 WWDG_IRQHandler()–&gt;HAL_WWDG_IRQHHandler</li><li>重定义提前唤醒回调函数 HAL_WWDG_EarlyWakeupCallback()</li><li>在窗口器内喂狗 HAN_WWDG_Refresh()</li></ol><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h4 id="软件定时（cpu死等）"><a href="#软件定时（cpu死等）" class="headerlink" title="软件定时（cpu死等）"></a>软件定时（cpu死等）</h4><p>时钟频率分之一就是一条指令的时间，使用循环运行空指令__nop()来实现延时。不精准，且造成cpu资源浪费</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// stm32 延时</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay_us</span><span class="params">(<span class="type">uint32_t</span> us)</span>&#123;</span><br><span class="line">us *= <span class="number">72</span>;</span><br><span class="line">    <span class="keyword">while</span>(us--);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定时器原理"><a href="#定时器原理" class="headerlink" title="定时器原理"></a>定时器原理</h4><p>时钟源（精准时钟），经过预分频器，到计数器计数，产生溢出表示时间到了，自动重装载寄存器会把计时器重装载。</p><h4 id="计时器分类"><a href="#计时器分类" class="headerlink" title="计时器分类"></a>计时器分类</h4><ol><li>常规定时器</li></ol><blockquote><p>基本&#x2F;通用&#x2F;高级定时器</p></blockquote><ol start="2"><li>专用定时器</li></ol><blockquote><p>独立看门狗，窗口看门狗，实时时钟TRC，低功耗定时器</p></blockquote><ol start="3"><li>内核定时器</li></ol><blockquote><p>SysTick定时器</p></blockquote><h4 id="定时器特征表"><a href="#定时器特征表" class="headerlink" title="定时器特征表"></a>定时器特征表</h4><p>有八个定时器: 基本TIM6&#x2F;7; 通用TIM2&#x2F;3&#x2F;4&#x2F;5; 高级TIM1&#x2F;8</p><p>F1特征表（芯片不一样要查手册 ）:</p><table><thead><tr><th align="center">类型</th><th align="center">定时器</th><th align="center">位数</th><th align="center">计数模式</th><th align="center">预分频系数</th><th align="center">DMA请求</th><th align="center">捕获&#x2F;比较通道</th><th align="center">互补输出</th></tr></thead><tbody><tr><td align="center">基本</td><td align="center">TIM6&#x2F;7</td><td align="center">16</td><td align="center">递增</td><td align="center">1~65535</td><td align="center">yes</td><td align="center">0</td><td align="center">no</td></tr><tr><td align="center">通用</td><td align="center">TIME2 &#x2F;3&#x2F;4&#x2F;5</td><td align="center">16</td><td align="center">递增&#x2F;递减&#x2F;中央对齐</td><td align="center">1~65535</td><td align="center">yes</td><td align="center">4</td><td align="center">no</td></tr><tr><td align="center">高级</td><td align="center">TIM1&#x2F;8</td><td align="center">16</td><td align="center">递增&#x2F;递减&#x2F;中央对齐</td><td align="center">1~65535</td><td align="center">yes</td><td align="center">4</td><td align="center">yes</td></tr></tbody></table><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><table><thead><tr><th>类型</th><th align="center">主要功能</th></tr></thead><tbody><tr><td>基本</td><td align="center">只有输入输出通道，常用作时基，即定时功能</td></tr><tr><td>通用</td><td align="center">具有多路独立通道，可用于输入捕获&#x2F;输出比较，可以用作时基</td></tr><tr><td>高级</td><td align="center">除既有通用的功能外，还具备带死区控制的互补信号输出，刹车输入等功能（可用于电机控制，数字电源设计等）</td></tr></tbody></table><h3 id="基本定时器"><a href="#基本定时器" class="headerlink" title="基本定时器"></a>基本定时器</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><ol><li>TIM6&#x2F;7</li><li>特性：16位递增计时器(0~65535)，16位预分频器(1-65536)，可触发DAC，在更新事件时，可产生中断&#x2F;DMA请求</li></ol><h4 id="框图"><a href="#框图" class="headerlink" title="框图"></a>框图</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A(RCC) --&gt; B[触发控制器 复位,使能,计数]</span><br><span class="line">B --&gt; |TRGO UI事件| C[DAC]</span><br><span class="line">    B --&gt; D[预分频器]</span><br><span class="line">    D --&gt; E[计数器]</span><br><span class="line">    F[重装载计数器ARR] --&gt; E</span><br><span class="line">    FL[ARPE决定ARR是否具有缓冲] --&gt; F</span><br><span class="line">    E --&gt; G[溢出条件CNT==ARR]</span><br><span class="line">    G --&gt; H[UI事件]</span><br><span class="line">    G --&gt; I[U中断和DMA输出]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="计数模式及溢出条件"><a href="#计数模式及溢出条件" class="headerlink" title="计数模式及溢出条件"></a>计数模式及溢出条件</h4><table><thead><tr><th>计数器模式</th><th>溢出条件</th></tr></thead><tbody><tr><td>递增</td><td>CNT&#x3D;&#x3D;ARR(max)</td></tr><tr><td>递减</td><td>CNT&#x3D;&#x3D;0</td></tr><tr><td>中心对齐</td><td>CNT &#x3D;&#x3D; ARR-1,  CNT &#x3D;&#x3D; 1</td></tr></tbody></table><h4 id="计时器终端相关寄存器"><a href="#计时器终端相关寄存器" class="headerlink" title="计时器终端相关寄存器"></a>计时器终端相关寄存器</h4><blockquote><p>TIMx_CR1</p><p>bit7 ARPE: 自动重装载预装载使能，决定ARR寄存器是否有缓冲</p><p>bit0 CEN: 计数器使能</p></blockquote><blockquote><p>TIMx_DIER</p><p>bit8 UDE: 更新DMA请求使能</p><p>bit0 UIE: 更新中断使能</p></blockquote><blockquote><p>TIMx_SR</p><p>bit0 UIF: 更新中断标志</p></blockquote><blockquote><p>TIMx_CNT</p><p>bit[15:0] 计数器数值</p></blockquote><blockquote><p>TIMx_PSC实际起作用是它的影子寄存器</p><p>bit[15:0] 预分频数值</p></blockquote><blockquote><p>TIMx_ARR    实际起作用是它的影子寄存器</p><p>bit[15:0] 自动重装载数值</p></blockquote><h4 id="寄存器溢出时间计算方法"><a href="#寄存器溢出时间计算方法" class="headerlink" title="寄存器溢出时间计算方法"></a>寄存器溢出时间计算方法</h4><p>$$<br>T_{out}&#x3D;\frac{(ARR+1)*(PSC+1)}{F_t}<br>$$</p><h4 id="定时器中断实验配置步骤"><a href="#定时器中断实验配置步骤" class="headerlink" title="定时器中断实验配置步骤"></a>定时器中断实验配置步骤</h4><ol><li>HAL_TIM_Base_Init()</li><li>HAL_TIM_Base_MspInit(), NVIC, CLOCK etc.</li><li>HAL_TIM_Base_Start_IT()</li><li>HAL_NVIC_SetPriority(), HAL_NVIC_EnableIRQ()</li><li>TIMx_IRQGandler() -&gt; HAL_TIM_IRQHandler()</li></ol><h3 id="通用定时器"><a href="#通用定时器" class="headerlink" title="通用定时器"></a>通用定时器</h3><h4 id="框图-1"><a href="#框图-1" class="headerlink" title="框图"></a>框图</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line"></span><br><span class="line">A[时钟源]</span><br><span class="line">B[时钟源:APB 内部触发输入 IO口 定时器的通道1/2]</span><br><span class="line">A --&gt; C[触发控制器 从模式控制器 编码器接口]</span><br><span class="line">C --&gt; |TRGO| D[其他定时器到DAC/ADC]</span><br><span class="line">C --&gt; |复位 使能 递增 计数| E[时基单元 影子寄存器]</span><br><span class="line">E --&gt; |UI U| F[产生事件]</span><br><span class="line">E --&gt; G[捕获/比较公共]</span><br><span class="line">J[外部IO] --&gt; H</span><br><span class="line">H[输入捕获] --&gt; G</span><br><span class="line">G --&gt; |比较中断| I[输出比较]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="时钟源"><a href="#时钟源" class="headerlink" title="时钟源"></a>时钟源</h4><ol><li>内部时钟(CK_INT),来自APB</li><li>外部时钟模式1:外部输入引脚(TIx),来自定时器通道1或2引脚的信号</li><li>外部时钟模式2:外部触发输入(RTR),来自可以复用为TIMx_ETR的IO引脚</li><li>内如触发输入(ITRx),用于与芯片内部其他通用&#x2F;高级定时器级联</li></ol><table><thead><tr><th>计数器时钟类型选择</th><th>设置方法</th></tr></thead><tbody><tr><td>内部时钟 CK_INT</td><td>set TIMx_SMCR.SMS &#x3D; 000</td></tr><tr><td>外部时钟模式1:外部输入引脚TIx &amp; CH1 CH2</td><td>set TIMx_SMCR.SMS &#x3D; 111</td></tr><tr><td>外部时钟模式2:外部输入引脚ETR</td><td>set TIMx_SMCR.ECE &#x3D; 1</td></tr><tr><td>内部触发输入 ITRx</td><td>参考手册,用于定时器级联</td></tr></tbody></table><h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4><ol><li>TIMx_CR1&#x2F;CR2 控制寄存器</li></ol><blockquote></blockquote><ol start="2"><li>TIMx_SMCR 从模式控制寄存器</li></ol><blockquote><p>b[15] ETP 外部触发极性</p><p>b[14] ECE 外部时钟使能</p><p>b[13:12] ETPS 外部触发预分频</p><p>b[11:8] ETF 外部触发滤波</p><p>b[7] MSM 主&#x2F;从模式</p><p>b[6:4] TS 触发选择</p><p>b[2:0] SMS 从模式选择</p></blockquote><p>略（看手册）</p><h4 id="嵌套使用"><a href="#嵌套使用" class="headerlink" title="嵌套使用"></a>嵌套使用</h4><p>使用一个定时器作为另一个定时器的预分频器</p><h4 id="通用定时器中断"><a href="#通用定时器中断" class="headerlink" title="通用定时器中断"></a>通用定时器中断</h4><p>HAL_TIM_Base_Start_IT(); 函数要在TIM_GENERAL_Init函数里，而不是MspInit()函数里</p><p>中断判断： &#x3D;&#x3D; SET 或 !&#x3D; RESET</p><p>if( __HAL_TIM_GET_ITSTATUS(&amp;tim_HandleX, TIM_IT_UPDATE) &#x3D;&#x3D; SET)</p><h4 id="输出比较部分"><a href="#输出比较部分" class="headerlink" title="输出比较部分"></a>输出比较部分</h4><p>PWM原理</p><p>PWM: 脉冲宽度调制</p><p>ARR 决定PWM周期</p><p>CCRX 决定PWM占空比 </p><p>PWM周期&#x2F;频率<br>$$<br>T_{out}&#x3D;\frac{(ARR + 1)*(PSC + 1)}{F_t}<br>$$</p><h4 id="输入捕获部分"><a href="#输入捕获部分" class="headerlink" title="输入捕获部分"></a>输入捕获部分</h4><p>捕获上升&#x2F;下降沿触发，编写逻辑</p><p>查看数据手册，看定时器的输入捕获通道在哪些GPIO端口，启用复用功能或复用重定义功能。</p><h4 id="外部时钟模式"><a href="#外部时钟模式" class="headerlink" title="外部时钟模式"></a>外部时钟模式</h4><p>配置定时器基本配置</p><p>配置从模式</p><h3 id="高级定时器"><a href="#高级定时器" class="headerlink" title="高级定时器"></a>高级定时器</h3><h1 id="构建HAL库工程（不使用cubemx）"><a href="#构建HAL库工程（不使用cubemx）" class="headerlink" title="构建HAL库工程（不使用cubemx）"></a>构建HAL库工程（不使用cubemx）</h1><h2 id="必须文件"><a href="#必须文件" class="headerlink" title="必须文件"></a>必须文件</h2><ol><li>stm32f1xx_hal_conf.h通过宏定义来include相应的外设头文件</li><li>stm32f1xx_it.h&#x2F;c 中断相关的代码，weak声明的函数需要重定义</li><li>system_stm32f1xx.c 内核级别的依赖程序，系统内核时钟，总线时钟等</li><li>stm32f1xx_hal_msp.c 板级支持包，MCU相关的硬件初始化操作</li></ol><h2 id="初始化流程"><a href="#初始化流程" class="headerlink" title="初始化流程"></a>初始化流程</h2><ol><li>HAL_Init(): 外设 flash 中断优先级 systemtick等</li><li>SystemClock_Config(): 配置倍频和总线频率</li><li>外设初始化</li></ol><h1 id="st-link-烧录程序"><a href="#st-link-烧录程序" class="headerlink" title="st-link 烧录程序"></a>st-link 烧录程序</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><blockquote><p>st-flash reset</p></blockquote><blockquote><p>st-info –probe</p></blockquote><blockquote><p>st-flash read out.bin 0x8000000 0x40000</p></blockquote><blockquote><p>st-flash write xxx.bin 0x8000000</p></blockquote><h1 id="Arm-none-eabi-gcc"><a href="#Arm-none-eabi-gcc" class="headerlink" title="Arm-none-eabi-gcc"></a>Arm-none-eabi-gcc</h1><h2 id="二进制复制"><a href="#二进制复制" class="headerlink" title="二进制复制"></a>二进制复制</h2><p><code>arm-none-eabi-objcopy -O binary xxx.elf xxx.bin</code></p><h1 id="PlatforIO"><a href="#PlatforIO" class="headerlink" title="PlatforIO"></a>PlatforIO</h1><h2 id="openocd权限问题"><a href="#openocd权限问题" class="headerlink" title="openocd权限问题"></a>openocd权限问题</h2><p><code>sudo chown -R papillon:users /dev/stlinkv2_4  </code></p><h1 id="GDB-stlink调试程序"><a href="#GDB-stlink调试程序" class="headerlink" title="GDB stlink调试程序"></a>GDB stlink调试程序</h1><ol><li>arm-none-eabi-as -mthumb  -mcpu&#x3D;cortex-m3 -g xxx.s -o xxx.o        <code>-mthumb (16位指令集)</code></li><li>arm-none-eabi-ld xxx.o -T xxx.ld -o xxx.elf</li><li>先编译程序下载到板子上</li><li>运行<code>st-util</code>命令来打开 gdbserver, 并记住端口号 ${port}</li><li>arm-none-eabi-gdb xx.elf</li><li>target remote *: ${port} </li><li>stepi , next, finish, list , continue ，- (图形界面)，info break, display, bt (查看堆栈),  jump <linenum> 跳转到第几行， x (打印地址的值) 等命令</li></ol><h1 id="串口工具"><a href="#串口工具" class="headerlink" title="串口工具"></a>串口工具</h1><h2 id="minicom"><a href="#minicom" class="headerlink" title="minicom"></a>minicom</h2><p><code>sudo minicom -s</code> 配置参数</p><p><code>sudo minicom -D /dev/bus/usb/001/012</code> 连接串口</p><p><code>ctrl_A Z</code>菜单</p><h1 id="ARM-汇编"><a href="#ARM-汇编" class="headerlink" title="ARM 汇编"></a>ARM 汇编</h1><h2 id="寄存器-1"><a href="#寄存器-1" class="headerlink" title="寄存器"></a>寄存器</h2><blockquote><p>cortex-M 系列使用armv7架构，使用thumb 指令集(T32)</p></blockquote><p>模式: User, FIQ, IRQ, ABT, SVC, UND, MON, HYP</p><ul><li><ol><li>R0-R12通用寄存器，放通用数据，32bit</li></ol></li><li><ol start="2"><li>各个模式R0-R12与User模式是共享的（除了 FIQ的R8-R12), PC, CPSR 是共享的</li></ol></li><li><ol start="3"><li>USER模式没有SPSR<blockquote><p>SP 栈指针，存储栈地址<br>LR 链接寄存器，存储子程序返回地址<br>PC 程序计数器<br>APSR&#x2F;CPSR 应用程序状态寄存器&#x2F;当前程序状态寄存器</p></blockquote></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> ARM coretx-M3 </tag>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
