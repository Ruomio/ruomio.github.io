<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux常用操作</title>
      <link href="/2024/02/09/ArchLinux/"/>
      <url>/2024/02/09/ArchLinux/</url>
      
        <content type="html"><![CDATA[<h1 id="ArchLinux"><a href="#ArchLinux" class="headerlink" title="ArchLinux"></a>ArchLinux</h1><h2 id="optimus-manager"><a href="#optimus-manager" class="headerlink" title="optimus-manager"></a>optimus-manager</h2><ul><li>在终端使用命令切换显卡</li><li>先运行 prime-offload</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换为英伟达显卡</span></span><br><span class="line">optimus-manager --switch nvidia</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换为intel核显</span></span><br><span class="line">optimus-manager --switch intel</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">无效</span></span><br><span class="line">sudo prime-select nvidia # 切换nvidia显卡</span><br><span class="line">sudo prime-select intel  # 切换intel显卡</span><br><span class="line">sudo prime-select query  # 查看当前使用的显卡</span><br></pre></td></tr></table></figure><blockquote><p>journalctl -p 3 -xb 查看系统日志</p></blockquote><ul><li>glxinfo命令可以查看当前正在使用的显卡。</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换前默认Intel</span></span><br><span class="line">[rainerosion@rains-arch ~]$ glxinfo | grep &quot;OpenGL renderer&quot;</span><br><span class="line">OpenGL renderer string: Mesa DRI Intel(R) HD Graphics 4600 (HSW GT2)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换NVIDIA显卡后</span></span><br><span class="line">[rainerosion@rains-arch ~]$ glxinfo | grep &quot;OpenGL renderer&quot;</span><br><span class="line">OpenGL renderer string: GeForce GTX 950M/PCIe/SSE2</span><br><span class="line">  </span><br></pre></td></tr></table></figure><ul><li>查看驱动版本信息</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls /usr/src | grep nvidia</span><br></pre></td></tr></table></figure><ul><li>查看显卡</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lspci -k | grep -A 2 -E &quot;(VGA|3D)&quot;</span><br></pre></td></tr></table></figure><h2 id="切换nvidia驱动后重启无法进入图形界面"><a href="#切换nvidia驱动后重启无法进入图形界面" class="headerlink" title="切换nvidia驱动后重启无法进入图形界面"></a>切换nvidia驱动后重启无法进入图形界面</h2><blockquote><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">按ctrl+alt+f2进入命令行，输入用户名密码进入（建议），输入命令nvidia-smi查看显卡是否运行正常</span><br><span class="line"></span><br><span class="line">运行nvidia-xconfig生成配置</span><br><span class="line">输入lspci | grep -E &quot;VGA|3D&quot;查看你的显卡PCI地址，</span><br><span class="line">将类似图中每行最前面的00.02.0转换成PCI:0:2:0，填在下面代码块中BusID那里，我使用的是NVIDIA，按照图中应该为PCI:1:0:0。将下面代码块添加到/etc/X11/xorg.conf文件中（同理，如果你是使用nvidia-xconfig后无法进入图形界面，你可以（删除/etc/X11/xorg.conf来重新进入图形界面）谨慎操作！！！）：</span><br><span class="line">Section &quot;Module&quot;</span><br><span class="line"><span class="code">    Load &quot;modesetting&quot;</span></span><br><span class="line"><span class="code">EndSection</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">Section &quot;Device&quot;</span><br><span class="line"><span class="code">    Identifier &quot;nvidia&quot;</span></span><br><span class="line"><span class="code">    Driver &quot;nvidia&quot;</span></span><br><span class="line"><span class="code">    BusID &quot;PCI:1:0:0&quot;</span></span><br><span class="line"><span class="code">    Option &quot;AllowEmptyInitialConfiguration&quot;</span></span><br><span class="line"><span class="code">EndSection</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">编辑/usr/share/sddm/scripts/Xsetup文件，将下列内容添加到文件中</span><br><span class="line">xrandr --setprovideroutputsource modesetting NVIDIA-0</span><br><span class="line">xrandr --auto</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">## 切换回intel</span></span><br><span class="line"></span><br><span class="line">sudo vim /etc/optimus-manager/optimus-manager.conf</span><br><span class="line"></span><br><span class="line">修改 startup<span class="emphasis">_mode=integrated  后 注销</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">## 登录选择位置</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">/usr/share/xsessions</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">## nmcli 连接wifi</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">nmcli dev 查看网络设备</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">nmcli r wifi on 打开wifi</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">nmcli r wifi off 关闭wifi</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">nmcli dev wifi 扫描wifi </span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">1. 创建wifi连接</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">$ nmcli device wifi connect &#123;wifi名&#125; password &#123;密码&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">2. 删除wifi连接</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">$ nmcli con del &#123;wifi名&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">3. 启用wifi连接</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">$ nmcli connection up &#123;wifi名&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">$ nmcli device con &#123;网卡名&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"> 4.查看已有连接</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">$ nmcli con</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">* 若报错`Error: Connection activation failed: (7) Secrets were required, but not provided.` 删除连接记录</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">```shell</span></span><br><span class="line"><span class="emphasis">$ nmcli c </span></span><br><span class="line"><span class="emphasis">NAME                UUID                                  TYPE      DEVICE</span></span><br><span class="line"><span class="emphasis">eno1                3e755f37-3cff-314d-bb1b-4efebb6ce566  ethernet  eno1</span></span><br><span class="line"><span class="emphasis">OpenWrt             14ad438b-9b2b-43c6-a3d1-66dd3bb987dc  wifi      --</span></span><br><span class="line"><span class="emphasis">$ nmcli c delete OpenWrt</span></span><br><span class="line"><span class="emphasis">Connection &#x27;OpenWrt&#x27; (14ad438b-9b2b-43c6-a3d1-66dd3bb987dc) successfully deleted.</span></span><br><span class="line"><span class="emphasis">$ nmcli device wifi connect &quot;OpenWrt&quot; password 00000000</span></span><br><span class="line"><span class="emphasis">Device &#x27;wlp58s0&#x27; successfully activated with &#x27;180a3ce4-ba1f-405a-94f1-684e538a7be9&#x27;.</span></span><br></pre></td></tr></table></figure></blockquote><p>但是隐藏了SSID的则需要额外操作，如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmcli c add type wifi con-name &quot;自定义连接名称&quot; ifname &quot;无线网卡名称&quot; ssid &quot;WiFi的名字&quot;</span><br><span class="line">nmcli con modify &quot;自定义连接名称&quot; wifi-sec.key-mgmt wpa-psk</span><br><span class="line">nmcli con modify &quot;自定义连接名称&quot; wifi-sec.psk &quot;WiFi的密码&quot;</span><br><span class="line">nmcli con up &quot;自定义连接名称&quot;</span><br></pre></td></tr></table></figure><p>查看网卡信息：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看网卡信息：</span></span><br><span class="line">nmcli dev show wlp7s0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建网卡</span></span><br><span class="line">nmcli connection add type bridge ifname br0 stp no</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看桥接绑定信息</span></span><br><span class="line">brctl show</span><br></pre></td></tr></table></figure><h2 id="创建证书连接"><a href="#创建证书连接" class="headerlink" title="创建证书连接"></a>创建证书连接</h2><blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmcli connection add \</span><br><span class="line"> type wifi con-name &quot;IMUNET-NG&quot; ifname wlp7s0 ssid &quot;IMUNET-NG&quot; -- \</span><br><span class="line"> wifi-sec.key-mgmt wpa-eap 802-1x.eap ttls \</span><br><span class="line"> 802-1x.phase2-auth mschapv2 802-1x.identity &quot;32309140&quot; \</span><br><span class="line"> 802-1x.password &quot;131539&quot;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">启动时(第一次)：</span><br><span class="line">nmcli --ask connection up IMUNET-NG</span><br></pre></td></tr></table></figure></blockquote><h2 id="nmcli-创建网桥"><a href="#nmcli-创建网桥" class="headerlink" title="nmcli  创建网桥"></a>nmcli  创建网桥</h2><p>注意: 仅有线网卡可以</p><ol><li>添加新的网桥： <code>nmcli connection add type bridge con-name virbr0 ifname virbr0 autoconnect yes</code></li><li>创建子网卡： <code>nmcli con add type bridge-slave ifname $&#123;网卡名&#125; master $&#123;网桥名&#125;</code></li><li>打开 br0： <code>nmcli con up br0</code></li><li></li></ol><h2 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h2><p>netstat -anp | grep 端口号</p><p>lsof  -i: 端口号</p><p>ps -ef 查看进程</p><p>w , tty</p><p>pkill 命令：杀死终端中所有命令 - pkill -9 -t pts&#x2F;0</p><h2 id="patch补丁"><a href="#patch补丁" class="headerlink" title="patch补丁"></a>patch补丁</h2><blockquote><p> Reversed (or previously applied) patch detected! Assume -R? [n]</p></blockquote><ul><li><code>-t</code>：该参数遇到这种情况直接将打过补丁的文件恢复原样，即未打补丁之前的状态</li><li><code>-f</code>：该参数遇到这种情况则继续打补丁，当然一般情况下会报错，毕竟对比不一致了</li><li><code>-N</code>：忽略该文件</li></ul><p>基本命令语法：<br>　　patch [-R] {-p(n)} [–dry-run] &lt; patch_file_name<br>　　p：为path的缩写。<br>　　n：指将patch文件中的path第n条’&#x2F;’及其左边部分取消。<br>　　-R：卸载patch包。<br>　　–dry-run：尝试patch软件，并不真正修改软件。</p><p>　　例如：</p><p>　　$ patch -p1 &lt; &#x2F;home&#x2F;sense&#x2F;patch-2.6.19.1      安装补丁<br>　　$ patch -p1 -R &lt; &#x2F;home&#x2F;sense&#x2F;patch-2.6.19.1 卸载补丁</p><h2 id="DPI设置"><a href="#DPI设置" class="headerlink" title="DPI设置"></a>DPI设置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">~/.Xresources</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认96</span></span><br><span class="line">Xft.dpi: 192</span><br><span class="line">xrdb -merge /home/papillon/.Xresources</span><br></pre></td></tr></table></figure><p>应用程序缩放：</p><blockquote><p>–force-device-scale-factor&#x3D;2 </p></blockquote><h2 id="双屏设置"><a href="#双屏设置" class="headerlink" title="双屏设置"></a>双屏设置</h2><blockquote><p>xrandr –output eDP-1-1 –primary –mode 3840x2160 –scale 1x1 –output DP-0 –mode 1920x1080 –scale 2x2 –left-of eDP-1-1 </p></blockquote><h2 id="向日葵启动"><a href="#向日葵启动" class="headerlink" title="向日葵启动"></a>向日葵启动</h2><blockquote><p>sudo systemctl start runsunloginclient.service </p><p>sudo systemctl enable runsunloginclient.service</p></blockquote><h2 id="chrome-代理"><a href="#chrome-代理" class="headerlink" title="chrome 代理"></a>chrome 代理</h2><ol><li><code>sudo google-chrome --proxy-server=&quot;127.0.0.1:8080&quot; --no-sandbox</code></li><li>使用代理插件</li></ol><h2 id="调整透明度"><a href="#调整透明度" class="headerlink" title="调整透明度"></a>调整透明度</h2><blockquote><ul><li>xprop 点击窗口获取窗口信息 WM_CLASS(STRING) 后的内容</li><li>vim ~&#x2F;.config&#x2F;picom&#x2F;picom.conf </li><li>在透明度中新加一行更改指定透明度</li></ul></blockquote><h2 id="调节音量"><a href="#调节音量" class="headerlink" title="调节音量"></a>调节音量</h2><p>alsamixer</p><blockquote><p>pgup&#x2F;pgdowm 增减音量</p><p>1~9 调节音量到 10%-90%</p></blockquote><h2 id="调节屏幕亮度"><a href="#调节屏幕亮度" class="headerlink" title="调节屏幕亮度"></a>调节屏幕亮度</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">手动切换</span></span><br><span class="line">切换root用户</span><br><span class="line">cd /sys/class/backlight/intel_backlight</span><br><span class="line">echo 0~512 &gt; brightness</span><br><span class="line"></span><br><span class="line">sudo pacman -S acpilight</span><br><span class="line">sudo gpasswd video -a 用户名 # 将当前用户添加到video实现免root控制亮度</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取当前亮度</span></span><br><span class="line">xbacklight -get</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置亮度</span></span><br><span class="line">xbacklight -set 70</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加亮度</span></span><br><span class="line">xbacklight -inc 10</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">减少亮度</span></span><br><span class="line">xbacklight -dec 10</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="切换内核"><a href="#切换内核" class="headerlink" title="切换内核"></a>切换内核</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改 grub 配置不是必须的，下面那个才是必须的。</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo nano /etc/default/grub</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这三行是将子菜单展开，这样不用点击 advanced 进去了</span></span><br><span class="line">GRUB_DISABLE_SUBMENU=y</span><br><span class="line">GRUB_DEFAULT=saved</span><br><span class="line">GRUB_SAVEDEFAULT=true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">等待时间我之前设置为 0s 的，0 就不显示了，这里改大一点 3s</span></span><br><span class="line">GRUB_TIMEOUT=3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">改完保存退出 -----------------------------------------</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新下 grub 的配置文件，让上面的设置生效，这一步是一定要做的。</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo grub-mkconfig -o /boot/grub/grub.cfg</span></span><br><span class="line">正在生成 grub 配置文件 ...</span><br><span class="line">找到 Linux 镜像：/boot/vmlinuz-linux-lts</span><br><span class="line">找到 initrd 镜像：/boot/amd-ucode.img /boot/initramfs-linux-lts.img</span><br><span class="line">Found fallback initrd image(s) in /boot:  amd-ucode.img initramfs-linux-lts-fallback.img</span><br><span class="line">找到 Linux 镜像：/boot/vmlinuz-linux</span><br><span class="line">找到 initrd 镜像：/boot/amd-ucode.img /boot/initramfs-linux.img</span><br><span class="line">Found fallback initrd image(s) in /boot:  amd-ucode.img initramfs-linux-fallback.img</span><br><span class="line">警告： os-prober will not be executed to detect other bootable partitions.</span><br><span class="line">Systems on them will not be added to the GRUB boot configuration.</span><br><span class="line">Check GRUB_DISABLE_OS_PROBER documentation entry.</span><br><span class="line">Adding boot menu entry for UEFI Firmware Settings ...</span><br><span class="line">完成</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="救援模式"><a href="#救援模式" class="headerlink" title="救援模式"></a>救援模式</h2><p>linux系统奔溃后的紧急救援模式<br>当 Linux 系统奔溃时，可以进入紧急救援模式（emergency mode）来检查和修复系统问题。以下是进入紧急救援模式的步骤：</p><p>在启动 GRUB 时，选择要启动的 Linux 内核。</p><p>按下 e 键进入编辑模式，在 kernel 行的末尾添加 single 或 emergency。</p><p>按下 Ctrl + X 启动系统。</p><p>系统会自动进入救援模式，此时会提示输入 root 用户密码，输入密码后即可进入救援模式。</p><p>在救援模式下，可以进行以下操作：</p><p>检查文件系统：使用 fsck 命令检查文件系统，并修复错误。</p><p>挂载文件系统：使用 mount 命令挂载文件系统，使得可以访问文件系统中的文件。</p><p>修改密码：使用 passwd 命令修改用户密码。</p><p>网络配置：使用 ifconfig 命令配置网络。</p><p>安装软件：使用 yum 或 apt-get 命令安装软件。</p><p>退出救援模式：使用 exit 命令退出救援模式，重新启动系统。</p><h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><ul><li><strong>关机</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shutdown -h 0 #&lt;==O秒后关机</span><br><span class="line">shutdown -h now #&lt;==现在关机</span><br><span class="line">shutdown -h 10 #&lt;==10分钟后关机</span><br><span class="line">shutdown -h 23:20 #&lt;==23：20分关机</span><br><span class="line">shutdown -c #&lt;==取消shutdown关机命令</span><br><span class="line">init 0 #&lt;==立马关机（切换运行级别为0，推荐使用）</span><br><span class="line">halt #&lt;==立马关机</span><br><span class="line">poweroff #&lt;==立马关机</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>重启</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shutdown -r now #&lt;==现在重启</span><br><span class="line">shutdown -r 23:20 &amp; #&lt;==23：20分重启，加&amp;符号代表把该命令转到后台处理</span><br><span class="line">reboot #&lt;==立马重启（推荐使用）</span><br><span class="line">init 6 #&lt;==立马重启（切换运行级别为6，推荐使用）</span><br></pre></td></tr></table></figure><ul><li><strong>注销</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">logout #&lt;==立马注销</span><br><span class="line">exit #&lt;==立马注销</span><br><span class="line">在SecureCRT软件中，按快捷键：Ctrl + d #&lt;==推荐使用</span><br></pre></td></tr></table></figure><h2 id="切换java版本"><a href="#切换java版本" class="headerlink" title="切换java版本"></a>切换java版本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看archlinux-java使用说明</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">archlinux-java --<span class="built_in">help</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看jdk状态</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">archlinux-java status</span></span><br><span class="line"></span><br><span class="line">Available Java environments:</span><br><span class="line">  java-11-openjdk</span><br><span class="line">  java-8-openjdk (default)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取默认jdk</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">archlinux-java get</span></span><br><span class="line"></span><br><span class="line">java-8-openjdk</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置默认jdk</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo archlinux-java <span class="built_in">set</span> java-11-openjdk</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看切换后的jdk版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">java -version</span></span><br><span class="line"></span><br><span class="line">openjdk version &quot;11.0.13&quot; 2021-10-19</span><br><span class="line">OpenJDK Runtime Environment (build 11.0.13+8)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 11.0.13+8, mixed mode)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="crontab脚本"><a href="#crontab脚本" class="headerlink" title="crontab脚本"></a>crontab脚本</h2><blockquote><ul><li>-e : 执行文字编辑器来设定时程表，内定的文字编辑器是 VI，如果你想用别的文字编辑器，则请先设定 VISUAL 环境变数来指定使用那个文字编辑器(比如说 setenv VISUAL joe)</li><li>-r : 删除目前的时程表</li><li>-l : 列出目前的时程表</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">min hour day mon week program</span><br></pre></td></tr></table></figure><table><thead><tr><th>每分钟定时执行一次</th><th>* * * * *</th></tr></thead><tbody><tr><td>每小时定时执行一次</td><td>0 * * * *</td></tr><tr><td>每天定时执行一次</td><td>0 0 * * *</td></tr><tr><td>每周定时执行一次</td><td>0 0 * * 0</td></tr><tr><td>每月定时执行一次</td><td>0 0 1 * *</td></tr><tr><td>每月最后一天定时执行一次</td><td>0 0 L * *</td></tr><tr><td>每年定时执行一次</td><td>0 0 1 1 *</td></tr></tbody></table></blockquote><ul><li>要确保有对目标文件的权限</li><li>命令要使用绝对路径</li></ul><h2 id="Top"><a href="#Top" class="headerlink" title="Top"></a>Top</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">c： 显示完整的命令</span><br><span class="line">d： 更改刷新频率</span><br><span class="line">f： 增加或减少要显示的列(选中的会变成大写并加*号)</span><br><span class="line">F： 选择排序的列</span><br><span class="line">h： 显示帮助画面</span><br><span class="line">H： 显示线程</span><br><span class="line">i： 忽略闲置和僵死进程</span><br><span class="line">k： 通过给予一个PID和一个signal来终止一个进程。（默认signal为15。在安全模式中此命令被屏蔽）</span><br><span class="line">l:  显示平均负载以及启动时间（即显示影藏第一行）</span><br><span class="line">m： 显示内存信息</span><br><span class="line">M： 根据内存资源使用大小进行排序</span><br><span class="line">N： 按PID由高到低排列</span><br><span class="line">o： 改变列显示的顺序</span><br><span class="line">O： 选择排序的列，与F完全相同</span><br><span class="line">P： 根据CPU资源使用大小进行排序</span><br><span class="line">q： 退出top命令</span><br><span class="line">r： 修改进程的nice值(优先级)。优先级默认为10，正值使优先级降低，反之则提高的优先级</span><br><span class="line">s： 设置刷新频率（默认单位为秒，如有小数则换算成ms）。默认值是5s，输入0值则系统将不断刷新</span><br><span class="line">S： 累计模式（把已完成或退出的子进程占用的CPU时间累计到父进程的MITE+ ）</span><br><span class="line">T： 根据进程使用CPU的累积时间排序</span><br><span class="line">t： 显示进程和CPU状态信息（即显示影藏CPU行）</span><br><span class="line">u： 指定用户进程</span><br><span class="line">W： 将当前设置写入~/.toprc文件，下次启动自动调用toprc文件的设置</span><br><span class="line">&lt;： 向前翻页</span><br><span class="line">&gt;： 向后翻页</span><br><span class="line">?： 显示帮助画面</span><br><span class="line">1(数字1)： 显示每个CPU的详细情况</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#上传本地文件夹到Linux</span><br><span class="line">scp -r -p 22 &#123;本地文件夹&#125; Linux用户名@ip地址:Linux绝对路径</span><br><span class="line">#上传文件</span><br><span class="line">scp -p 22 &#123;本地文件&#125; Linux用户名@ip地址:Linux绝对路径</span><br><span class="line"></span><br><span class="line"># 上传</span><br><span class="line">去掉指定端口号参数-p, 并将上述路径舒徐调换即可</span><br><span class="line"></span><br><span class="line">#下载</span><br><span class="line">scp -p 22 linux用户名@ipdizhi:文件路径 &#123;本地路径&#125;</span><br></pre></td></tr></table></figure><h2 id="ln-软链接"><a href="#ln-软链接" class="headerlink" title="ln 软链接"></a>ln 软链接</h2><p>ln -s 【目标目录】 【软链接地址】</p><p>目标目录】指软连接指向的目标目录下，【软链接地址】指“快捷键”文件名称，该文件是被指令创建的。</p><p>rm -rf 【软链接地址】</p><p>ln -snf 【新目标目录】 【软链接地址】</p><h2 id="ROFI-Script"><a href="#ROFI-Script" class="headerlink" title="ROFI Script"></a>ROFI Script</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><blockquote><p>rofi -show [mine] -modi “mine:~&#x2F;scripts&#x2F;rofi.sh”</p></blockquote><p>返回选中的文本</p><blockquote><p>ls | rofi -dmenu </p><p>history | rofi -dmenu.    h&#x3D;$(history | rofi -dmenu)</p></blockquote><h2 id="屏蔽磁盘"><a href="#屏蔽磁盘" class="headerlink" title="屏蔽磁盘"></a>屏蔽磁盘</h2><p>1　启动后的禁用 无需重启</p><p>　（sdx是你的磁盘 udev的更新可能会导致磁盘重新出现 在向系统添加&#x2F;删除磁盘也可能会改变）</p><blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">echo <span class="number">1</span>&gt;<span class="regexp">/sys/</span>block/sdx/device/<span class="keyword">delete</span> </span><br></pre></td></tr></table></figure></blockquote><p>2　基本上你创建一个文件<code>/etc/udev/rules.d/99-hide-disks.rules</code> ，你在其中放置该行</p><blockquote><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">KERNEL</span>==<span class="string">&quot;sda1&quot;</span>, ENV&#123;UDISKS_PRESENTATION_HIDE&#125;=<span class="string">&quot;1&quot;</span> </span><br></pre></td></tr></table></figure></blockquote><p>　 其中<em>sda1</em>是您要隐藏的分区的名称。 在某些系统中它也可以</p><blockquote><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">KERNEL</span>==<span class="string">&quot;sda1&quot;</span>, ENV&#123;UDISKS_IGNORE&#125;=<span class="string">&quot;1&quot;</span> </span><br></pre></td></tr></table></figure></blockquote><p>   然后你重新启动。</p><h2 id="QQ闪退"><a href="#QQ闪退" class="headerlink" title="QQ闪退"></a>QQ闪退</h2><blockquote><p>文件问题： sudo chattr +i ~&#x2F;.config&#x2F;QQ&#x2F;crash_files&#x2F;</p><p>代理问题： 不要走代理</p></blockquote><h1 id="pacman"><a href="#pacman" class="headerlink" title="pacman"></a>pacman</h1><h2 id="强制安装"><a href="#强制安装" class="headerlink" title="强制安装"></a>强制安装</h2><blockquote><p>pacman -S –overwrite ‘<em>‘ 要覆盖的文件模式</em>*</p></blockquote><h2 id="在-Arch-Linux-上安装-Debtap"><a href="#在-Arch-Linux-上安装-Debtap" class="headerlink" title="在 Arch Linux 上安装 Debtap"></a>在 Arch Linux 上安装 Debtap</h2><blockquote><p>要安装 Debtap，启动终端并使用 AUR 助手安装它：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;yay -S debtap</span><br><span class="line">&gt;sudo debtap -u</span><br></pre></td></tr></table></figure><p>使用 cd 命令进入 DEB 文件的目录并使用 Debtap 开始转换包。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;cd ~/Downloads</span><br><span class="line">&gt;debtap yourfile.deb</span><br></pre></td></tr></table></figure><p>Debtap 将创建一个“<strong>你的文件.zst</strong>” 文件，您可以使用包管理器轻松安装，在本例中为 pacman。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;sudo pacman -U yourfile.zst</span><br></pre></td></tr></table></figure></blockquote><h2 id="使用dpkg"><a href="#使用dpkg" class="headerlink" title="使用dpkg"></a>使用dpkg</h2><blockquote><ol><li>安装dpkg</li><li>使用dpkg安装deb包</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;yay -S dpkg</span><br><span class="line">&gt;dpkg -i .deb包名</span><br></pre></td></tr></table></figure></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>pacmam -U package.pkg.tar.gz 从安装本地package包</p><h2 id="多线程编译"><a href="#多线程编译" class="headerlink" title="多线程编译"></a>多线程编译</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/makepkg.conf </span><br></pre></td></tr></table></figure><p>找到 MAKEFLAGS 参数,修改 -j 后面的参数为想要用多少个核编译,保持并退出</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">MAKEFLAGS=&quot;-j8&quot;</span><br></pre></td></tr></table></figure><h2 id="代理问题"><a href="#代理问题" class="headerlink" title="代理问题"></a>代理问题</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 http 代理</span></span><br><span class="line">export http=http://127.0.0.1:7890</span><br><span class="line">export https=http://127.0.0.1:7890</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或, 设置 socket 代理(clash)</span></span><br><span class="line">export http_proxy=socks5://127.0.0.1:7891</span><br><span class="line">export https_proxy=socks5://127.0.0.1:7891</span><br></pre></td></tr></table></figure><h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote><p>带多个参数的命令 要加 command 修饰，例如</p><p><code>command gcc -g main.c -o main</code></p></blockquote><h1 id="内核编译"><a href="#内核编译" class="headerlink" title="内核编译"></a>内核编译</h1><h2 id="qemu安装"><a href="#qemu安装" class="headerlink" title="qemu安装"></a>qemu安装</h2><ol><li>i386:  qemu-system-i386</li><li>x86_64: qemu-system-x86_64</li><li>arm : qemu-system-arm</li><li>arm64: qemu-system-aarch64</li></ol><h2 id="交叉编译链安装"><a href="#交叉编译链安装" class="headerlink" title="交叉编译链安装"></a>交叉编译链安装</h2><ol><li>arm-linux-gnueabihf-</li><li>aarch64-linux-gnu-</li></ol><h2 id="编译linux内核"><a href="#编译linux内核" class="headerlink" title="编译linux内核"></a>编译linux内核</h2><blockquote><p>make ARCH&#x3D;arm64 CROSS_COMPILE&#x3D;aarch64-linux-gnu- defconfig<br>make ARCH&#x3D;arm64 CROSS_COMPILE&#x3D;aarch64-linux-gnu- menuconfig<br>make ARCH&#x3D;arm64 CROSS_COMPILE&#x3D;aarch64-linux-gnu- -j 8</p></blockquote><h2 id="制作跟文件系统-busybox"><a href="#制作跟文件系统-busybox" class="headerlink" title="制作跟文件系统 busybox"></a>制作跟文件系统 busybox</h2><ol><li>下载源码，并设置对应目标的架构，编译。</li><li>qemu-img create xxx.img 4g 创建4g磁盘，使用mkfs.ext4 xxx.img 格式化<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建 1g (这个根据实际需要进行配置) 的 raw 格式的空镜像磁盘</span> </span><br><span class="line">qemu-img create rootfs.img 1g </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将创建的磁盘格式化成 ext4 类型的文件系统</span> </span><br><span class="line">mkfs.ext4 rootfs.img </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个文件用来挂载该镜像（用来将编译好的内容装入磁盘，载体）</span> </span><br><span class="line">mkdir rootfs </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 rootfs.img 挂载到 rootfs 文件夹</span> </span><br><span class="line">sudo mount -o loop rootfs.img rootfs </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将在 busybox 中编译的内容移动到刚新建的文件夹 rootfs 中(等价于拷贝到了 rootfs.img 磁盘中)</span> </span><br><span class="line">cd rootfs </span><br><span class="line">sudo cp -r ../busybox/_install/* . </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">补充一些必要的文件夹</span> </span><br><span class="line">sudo mkdir proc sys dev etc etc/init.d</span><br><span class="line"></span><br><span class="line">cd etc/init.d/ sudo touch rcS sudo vi rcS</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件内容如下</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">mount -t proc none /proc# 挂载文件系统到 /proc 目录, 它提供了一个接口来访问内核和进程信息</span><br><span class="line">mount -t sysfs none /sys# 挂载sysfs文件系统到 /sys 目录, 提供了一种方式来访问和调整内核的运行时信息</span><br><span class="line">/sbin/mdev -s# 使用mdev（是BusyBox的一部分）来初始化/dev目录，它负责创建设备节点</span><br><span class="line"># -s 告诉 mdev 启动是扫描 /sys 目录并创建设备节点 </span><br><span class="line"># /sys中包含了当前系统中硬件设备的详细信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo chmod +x rcS</span><br><span class="line"></span><br><span class="line">cd ../..</span><br><span class="line">sudo umount rootfs</span><br></pre></td></tr></table></figure></li></ol><h2 id="qemu启动系统"><a href="#qemu启动系统" class="headerlink" title="qemu启动系统"></a>qemu启动系统</h2><p><code>qemu-system-aarch64 -M virt -cpu cortex-a57 -m 256M -nographic -kernel ../linux-6.7/arch/arm64/boot/Image -drive file=rootfs.img,format=raw,id=hd0,if=none -device virtio-blk-device,drive=hd0 -append &quot;root=/dev/vda rw console=ttyAMA0&quot; </code></p><h2 id="虚拟机和宿主机通讯"><a href="#虚拟机和宿主机通讯" class="headerlink" title="虚拟机和宿主机通讯"></a>虚拟机和宿主机通讯</h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test1</title>
      <link href="/2024/02/09/test1/"/>
      <url>/2024/02/09/test1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/02/08/hello-world/"/>
      <url>/2024/02/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
